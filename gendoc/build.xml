<?xml version="1.0"?>
<!--****************************************************************************
 * CruiseControl, a Continuous Integration Toolkit
 * Copyright (c) 2001, ThoughtWorks, Inc.
 * 200 E. Randolph, 25th Floor
 * Chicago, IL 60601 USA
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *     + Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *     + Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 *
 *     + Neither the name of ThoughtWorks, Inc., CruiseControl, nor the
 *       names of its contributors may be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ****************************************************************************-->


<project name="gendoc" default="clean-all" basedir=".">
    <description>
        CruiseControl gendoc - automates the generation of plugin configuration documentation.
    </description>

    <property environment="env" />
    <property file="override.properties" />

    <!-- define cc.version -->
    <property file="../build.properties" />
    <!-- Use a local variable to make sure that a script that would read the
         properties file would still be capable of overidding this one.
         Note: the release.xml overrides this property -->
    <property name="cc.release.label" value="${cc.version}" />

    <property name="target" value="${basedir}/target" />
    <property name="docs" value="${target}/docs" />
    <property name="apidocs" value="${docs}/api" />

    <property name="classes" value="${target}/classes" />
    <property name="dist" value="dist" />
    <property name="junit.results" value="${target}/test-results" />
    <property name="src" value="${basedir}/src" />
    <property name="test" value="${basedir}/test" />
    <property name="test.classes" value="${target}/test-classes" />
    <property name="tests" value="*Test" />
    <property name="xsl" value="${basedir}/xsl" />

    <property name="project.root" location="${basedir}/.."/>

    <import file="${project.root}/.ant-scripts/build-properties.xml"/>

    <import file="build-paths.xml"/>

    <import file="${ant.scripts}/build-delegates.xml"/>

    <target name="clean" depends="-clean" description="--> Cleans all build artifacts and temporary files">
        <delete quiet="yes" dir="${dist}"/>
    </target>

    <target name="dev" depends="-dev" description="--> Compiles all source code, runs all tests"/>

    <target name="package" depends="-package" description="--> Compiles, tests, and creates package for release"/>

    <!--
      ~  DEPRECATED:
      ~      The Ant targets below are deprecated and will be removed in a future release.
      -->

    <target name="checklabel">
        <fail unless="cc.release.label" message="label is not defined." />
    </target>

    <target name="init" depends="checklabel,--compile-init,--javadoc-init,--package-init,--test-unit-init">
        <tstamp />
        <property name="build.version" value="${cc.release.label}" />
        <property name="build.version.info" value="Compiled on ${TODAY} ${TSTAMP}" />
    </target>

    <target name="compile" depends="-compile" unless="compile.skip"/>

    <target name="compile-test" depends="--test-unit-init,--test-unit-compile"/>

    <target name="test" depends="-test" unless="test.skip"/>

    <target name="test-one" depends="compile-test" if="testcase">
        <junit fork="yes" haltonfailure="true" printsummary="true" dir="${target}">
            <classpath>
                <path refid="test.unit.run.path" />
            </classpath>
            <formatter type="brief" usefile="false" />
            <formatter type="xml" />
            <test name="${testcase}" todir="${junit.results}" />
        </junit>
    </target>

    <target name="jar" depends="compile,-package"/>

    <target name="javadoc" depends="-javadoc"/>

    <target name="clean-all" depends="clean, all"/>

    <target name="all"
            depends="init,compile,test,jar"/>

</project>
