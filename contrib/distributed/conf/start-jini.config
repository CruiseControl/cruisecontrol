import com.sun.jini.start.NonActivatableServiceDescriptor;
import com.sun.jini.start.ServiceDescriptor;
import com.sun.jini.config.ConfigUtil;

/*
 * This configuration requires the following system properties to function properly:
 *   java.security.policy
 *   jini.lib
 *   jini.lib.dl
 *   jini.httpPort
*/

com.sun.jini.start {
	// Common
	static hostname = 

        // BAD DNS HACK
        // Note: If DNS is badly broken on you LAN, try replacing ConfigUtil.getHostName() with
        // the IP Address of the machine running your Lookup Service. (Better to fix DNS though...)
        // If you do this, you will also likely have to update TcpServerEndpoint.getInstance(0) in
        // the file transient-reggie.config.
        //"10.6.18.51"
        ConfigUtil.getHostName()
        ;
    private static codebaseURI = ConfigUtil.concat(new Object[] { "http://", hostname, ":", "${jini.httpPort}", "/"});
    private static classpathBase = ConfigUtil.concat(new Object[] {"${jini.lib}","${/}"});

	// httpd
	private static httpdCodebase = "";
	private static httpdPolicy = "${java.security.policy}";
	private static httpdClasspath = ConfigUtil.concat(new Object[] {classpathBase, "tools.jar"});
	private static httpdClass = "com.sun.jini.tool.ClassServer";
	private static httpdArgs
	        = new String[]{"-port", "${jini.httpPort}", "-dir", "${jini.lib.dl}", "-stoppable", "-verbose"};
	
	// reggie
	private static reggieCodebase = ConfigUtil.concat(new Object[] {
										codebaseURI, "jsk-dl.jar", " ", codebaseURI, "reggie-dl.jar" });
	private static reggiePolicy = "${java.security.policy}";
	private static reggieClasspath = ConfigUtil.concat(new Object[] {
										classpathBase, "reggie.jar", "${/}" });
	private static reggieClass = "com.sun.jini.reggie.TransientRegistrarImpl";
	//private static reggieArgs = new String[]{};
	private static reggieArgs = new String[]{ "conf/transient-reggie.config" };
/*
	// fiddler
	private static fiddlerCodebase = ConfigUtil.concat(new Object[] {
										codebaseURI, "fiddler-dl.jar" });
	private static fiddlerPolicy = "${java.security.policy}";
	private static fiddlerClasspath = ConfigUtil.concat(new Object[] {
										classpathBase, "fiddler.jar", "${/}" });
	private static fiddlerClass = "com.sun.jini.fiddler.TransientFiddlerImpl";
	private static fiddlerArgs = new String[]{};
*/
/*
	// mahalo
	private static mahaloCodebase = ConfigUtil.concat(new Object[] {
										codebaseURI, "mahalo-dl.jar" });
	private static mahaloPolicy = "${java.security.policy}";
	private static mahaloClasspath = ConfigUtil.concat(new Object[] {
										classpathBase, "mahalo.jar", "${/}" });
	private static mahaloClass = "com.sun.jini.mahalo.TransientMahaloImpl";
	private static mahaloArgs = new String[]{};
*/
/*
	// mercury
	private static mercuryCodebase = ConfigUtil.concat(new Object[] {
										codebaseURI, "mercury-dl.jar" });
	private static mercuryPolicy = "${java.security.policy}";
	private static mercuryClasspath = ConfigUtil.concat(new Object[] {
										classpathBase, "mercury.jar", "${/}" });
	private static mercuryClass = "com.sun.jini.mercury.TransientMercuryImpl";
	private static mercuryArgs = new String[]{};
*/
/*
	// norm
	private static normCodebase = ConfigUtil.concat(new Object[] {
										codebaseURI, "norm-dl.jar" });
	private static normPolicy = "${java.security.policy}";
	private static normClasspath = ConfigUtil.concat(new Object[] {
										classpathBase, "norm.jar", "${/}" });
	private static normClass = "com.sun.jini.norm.TransientNormServerImpl";
	private static normArgs = new String[]{};
*/
/*
	// outrigger
	private static outriggerCodebase = ConfigUtil.concat(new Object[] {
										codebaseURI, "outrigger-dl.jar" });
	private static outriggerPolicy = "${java.security.policy}";
	private static outriggerClasspath = ConfigUtil.concat(new Object[] {
										classpathBase, "outrigger.jar", "${/}" });
	private static outriggerClass = "com.sun.jini.outrigger.TransientOutriggerImpl";
	private static outriggerArgs = new String[]{};
*/
/*
	// phoenix
	private static phoenixCodebase = ConfigUtil.concat(new Object[] {
										codebaseURI, "phoenix-dl.jar" });
	private static phoenixPolicy = "${java.security.policy}";
	private static phoenixClasspath = ConfigUtil.concat(new Object[] {
										classpathBase, "phoenix.jar", "${/}" });
	private static phoenixClass = "com.sun.jini.phoenix.TransientPhoenixImpl";
	private static phoenixArgs = new String[]{};
*/
/*
	// Holowaa
	private static holowaaCodebase = ConfigUtil.concat(new Object[] {
										codebaseURI, "holowaa-dl.jar" });
	private static holowaaPolicy = "${java.security.policy}";
	private static holowaaClasspath = ConfigUtil.concat(new Object[] {
										classpathBase, "holowaa.jar", "${/}" });
	private static holowaaClass = "org.jini.user.jmcclain.holowaa.TransientHolowaaServerImpl";
	private static holowaaArgs = new String[]{};
*/

    static serviceDescriptors = new ServiceDescriptor[] {
        // httpd
        new NonActivatableServiceDescriptor(
            httpdCodebase,
            httpdPolicy,
            httpdClasspath,
            httpdClass,
            httpdArgs
        ),

        // reggie (lookup service)
        new NonActivatableServiceDescriptor(
            reggieCodebase,
            reggiePolicy,
            reggieClasspath,
            reggieClass,
            reggieArgs
        )
/*,
        // fiddler
        new NonActivatableServiceDescriptor(
            fiddlerCodebase,
            fiddlerPolicy,
            fiddlerClasspath,
            fiddlerClass,
            fiddlerArgs
        ),
*/
/*
        // mahalo
        new NonActivatableServiceDescriptor(
            mahaloCodebase,
            mahaloPolicy,
            mahaloClasspath,
            mahaloClass,
            mahaloArgs
        ),
*/
/*
        // mercury
        new NonActivatableServiceDescriptor(
            mercuryCodebase,
            mercuryPolicy,
            mercuryClasspath,
            mercuryClass,
            mercuryArgs
        ),
*/
/*
        // norm
        new NonActivatableServiceDescriptor(
            normCodebase,
            normPolicy,
            normClasspath,
            normClass,
            normArgs
        ),
/*
        // outrigger
        new NonActivatableServiceDescriptor(
            outriggerCodebase,
            outriggerPolicy,
            outriggerClasspath,
            outriggerClass,
            outriggerArgs
        ),
*/
/*
        // phoenix
        new NonActivatableServiceDescriptor(
            phoenixCodebase,
            phoenixPolicy,
            phoenixClasspath,
            phoenixClass,
            phoenixArgs
        )
*/
	};
}
