/* Service configuration file containing entries used to configure
 * Reggie when that service is started by the ServiceStarter
 * framework; satisfying the following criteria:
 *  - uses JERI for remote invocation
 *  - is NOT activatable
 *  - does NOT perist its state
 */
import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.tcp.TcpServerEndpoint;

com.sun.jini.reggie {

    /* Exporter(s) -------------------------------------------------------------- */

    /* Create the exporter to use to export the remote service object.
     * 
     * The exporter configured here will export the service in the
     * following way:
     *  - use Jini ERI for remote communciation
     *  - when accepting network connections, use the default endpoint
     *  - to generate the server-side dispatcher for the service, and
     *    to generate the client-side invocation handler for the service's
     *    dynamic proxy, use the specified invocation layer factory
     *  - disable distributed garbage collection (DGC) to the service
     *    so that the service backend is strongly referenced when it is
     *    exported (the default)
     *  - while the service remains exported via this exporter, keep the
     *    virtual machine alive (the default)
     *  - use a default object identifier
     *
     *                        *** Note ***
     *
     * Note that the value of the 'serverExporter' configuration entry specified 
     * in this example configuration file is actually the default value that 
     * would be used by the service if no value were supplied for that entry. 
     * Although it is not necessary to specify a value for that entry, it is 
     * included in this example for reference purposes. Note also that when the
     * value of the 'port' argument in the call to TcpServerEndpoint.getInstance
     * is 0 (as it is in this example), the actual port used to export the 
     * service will be randomly chosen by the Jini ERI framework.
     * 
     * It may be worth comparing the exporter specified in this example to the 
     * exporter specified in the example configuration used to start the service
     * in nonactivatable mode using Jini ERI.
     *
     * This example allows the Jini ERI framework - not the deployer - to choose 
     * the port and object ID with which to export the service, whereas the 
     * example configuration for starting the service in nonactivatable mode 
     * using Jini ERI specifies a 'specific' port and object ID to use. This 
     * can be seen by observing that this example inputs 0 for the port and 
     * uses only the 4-argument version of the net.jini.jeri.BasicJeriExporter 
     * constructor (leaving the object ID unspecified), whereas the other 
     * example configures the exporter using the 5-argument version of the 
     * constructor, supplying a non-zero value for the port and a specific 
     * value for the object ID in the last argument.
     * 
     * To understand why the transient and nonactivatable modes of the service 
     * are exported differently, consider the following. The nonactivatable mode 
     * of the service persists its state because it wishes to be able to recover 
     * and pick up where it left off when it is restarted after a crash or system 
     * failure. As is explained in a little more detail in the README file for 
     * this example set, in order to do this, the service must always be exported 
     * and re-exported using the same port and object ID. Thus, for the 
     * nonactivatable mode of the service under Jini ERI, the exporter used is 
     * configured with a fixed port and object ID. On the other hand, there is no 
     * such requirement for the transient modes of the service (under either 
     * JRMP or Jini ERI). This is because by its nature, each time a transient 
     * service is started, it is as if it is started for the very first time; 
     * there is no state to recover, no "place" to pick up where a previous run 
     * left off.
     */
    private invocationLayerFactory = new BasicILFactory();
    serverExporter = new BasicJeriExporter(

        // BAD DNS HACK
        // Note: If DNS is badly broken on you LAN, comment out TcpServerEndpoint.getInstance(0) and
        // uncomment TcpServerEndpoint.getInstance("10.6.18.51", 0) and replace IP Address with
        // the IP Address of the machine running your Lookup Service. (Better to fix DNS though...)
        // If you do this, you will also likely have to update ConfigUtil.getHostName() in
        // the file start-jini.config.
                                           //TcpServerEndpoint.getInstance("10.6.18.51", 0),
                                           TcpServerEndpoint.getInstance(0),

                                           invocationLayerFactory,
                                           false,
                                           true);

    /* Application-specific Items ----------------------------------------------- */

    //initialMemberGroups = new String[] {"JERI_Group0","JERI_Group1"};

}//end com.sun.jini.reggie
