<?xml version="1.0"?>
<!--****************************************************************************
 * CruiseControl, a Continuous Integration Toolkit
 * Copyright (c) 2001, ThoughtWorks, Inc.
 * 200 E. Randolph, 25th Floor
 * Chicago, IL 60601 USA
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *     + Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *     + Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 *
 *     + Neither the name of ThoughtWorks, Inc., CruiseControl, nor the
 *       names of its contributors may be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ****************************************************************************-->

<project name="cruisecontrol" default="dist">
    <description>
        CruiseControl - continuous build server.
    </description>

    <property environment="env" />
    <property file="override.properties" />

    <!-- define cc.version -->
    <property file="../build.properties" />
    <!-- Use a local variable to make sure that a script that would read the
         properties file would still be capable of overidding this one.
         Note: the release.xml overrides this property -->
    <property name="cc.release.label" value="${cc.version}" />

    <property name="target" value="target" />
    <property name="apidocs" value="${target}/javadoc" />
    <property name="reports.dir" value="${target}/reports" />
    <property name="functional-reports.dir" value="${target}/reports-functional" />

    <property name="classes" value="${target}/classes" />
    <property name="dist" value="dist" />
    <property name="junit.results" value="${target}/test-results" />
    <property name="src" value="src" />
    <property name="test" value="test" />
    <property name="functionaltest" value="functionaltest" />
    <property name="test.classes" value="${target}/test-classes" />
    <property name="tests" value="*Test" />
    <property name="xsl" value="xsl" />

    <property name="project.root" location="${basedir}/.."/>

    <import file="${project.root}/.ant-scripts/build-properties.xml"/>

    <import file="build-paths.xml"/>

    <import file="${ant.scripts}/build-delegates.xml"/>

    <property name="checkstyle.cache" value="${target}/checkstyle.cache" />
    <property name="checkstyle.config" value="${project.root}/common/checkstyle.xml"/>

    <property name="emma.results" value="${target}/emma-results" />
    <property name="emma.stats" value="${emma.results}/coverage.emma" />

	<property name="gendoc.output" value="${project.root}/documentation/main/configxml-gendoc.html" />
	<property name="gendoc.css" value="${src}/net/sourceforge/cruisecontrol/gendoc/html/gendoc.css" />
	
    <taskdef resource="emma_ant.properties">
        <classpath>
            <fileset refid="emma.lib" />
            <fileset refid="emma-ant.lib" />
        </classpath>
    </taskdef>

    <target name="clean" depends="-clean,clean-gendoc" description="--> Cleans all build artifacts and temporary files">
        <delete quiet="yes" dir="${dist}"/>
        <ant dir="loggers" target="clean"/>
    </target>

    <target name="dev" depends="logger.jar,-dev" description="--> Compiles all source code, runs all tests"/>

    <target name="package" depends="-package" description="--> Compiles, tests, and creates package for release"/>
    <target name="package-test" depends="-package-test" description="--> Compiles, tests, and creates package with test utils"/>

    <!--
      ~  OVERRIDES:
      ~      The Ant targets below customize the behavior of the common Ant tasks for this module.
      -->

    <target name="--package-jar">
        <jar jarfile="${dist}/${ant.project.name}.jar">
            <manifest>
                <attribute name="Main-Class" value="CruiseControl" />
            </manifest>
            <fileset dir="${classes}" />
            <fileset dir="${xsl}" />
            <manifest>
                <attribute name="Implementation-Version" value="${build.version} ${build.version.info}" />
            </manifest>
        </jar>
        <jar jarfile="${dist}/cruisecontrol-launcher.jar">
            <manifest>
                <attribute name="Main-Class" value="net.sourceforge.cruisecontrol.launch.Launcher" />
            </manifest>
            <fileset dir="${classes}" includes="**/launch/**" />
        </jar>
    </target>

    <!--
      ~  DEPRECATED:
      ~      The Ant targets below are deprecated and will be removed in a future release.
      -->

    <target name="all" depends="init,compile,test,functional-test,gendoc,jar"/>
    <target name="clean-all" depends="clean, all"/>
    <target name="checkstyle" depends="-checkstyle"/>
    <target name="compile" depends="logger.jar,-compile" unless="compile.skip"/>
    <target name="compile-test" depends="--test-init,--test-unit-init,--test-unit-compile"/>
    <target name="compile-functional-test" depends="--test-init,--test-functional-init,--test-functional-compile"/>
    <target name="dist" depends="clean, all"/>
    <target name="jar" depends="compile,copy-css,-package"/>
    <target name="javadoc" depends="-javadoc"/>
    <target name="test" depends="compile,-test" unless="test.skip"/>
    <target name="functional-test" depends="-test-functional" unless="test.skip"/>

    <target name="checklabel">
        <fail unless="cc.release.label" message="label is not defined." />

        <echo>Java: ${java.version} (${java.vm.name})</echo>
        <echo>   in ${java.home}</echo>
        <echo>Ant: ${ant.version}</echo>
        <echo>   in ${ant.home}</echo>
        <echo>CruiseControl: ${cc.release.label}</echo>        
    </target>

    <target name="init" depends="checklabel,--compile-init,copy-css,--javadoc-init,--package-init,--test-init,--test-unit-init">
        <mkdir dir="${target}/tmp" />
        <mkdir dir="${emma.results}" />
        <mkdir dir="${dist}"/>

        <available file="${env.NANT_HOME}/NAnt.exe" property="nant-present" />

        <tstamp />
        <property name="build.version" value="${cc.release.label}" />
        <property name="build.version.info" value="Compiled on ${TODAY} ${TSTAMP}" />
    </target>


    <target name="emma-instrument" depends="init, compile">
        <emma>
            <instr instrpath="${classes}" outdir="${classes}" merge="yes" metadatafile="${emma.results}/metadata.emma" mode="overwrite" />
        </emma>
    </target>

    <target name="report-emma" depends="init, emma-instrument, test">
        <property name="emma.html.report" value="${emma.results}/coverage.html" />
        <emma>
            <report sourcepath="${src}">
                <fileset dir="${emma.results}">
                    <include name="*.emma" />
                </fileset>

                <html outfile="${emma.html.report}" />
            </report>
        </emma>
        <echo message="View EMMA's HTML report at ${emma.html.report}" />
    </target>

    <target name="test-one" depends="compile-test" if="testcase">
        <junit fork="yes" haltonfailure="true" printsummary="true" dir="${target}"
               includeAntRuntime="false"
                >
            <classpath refid="test.unit.run.path" />
            <formatter type="brief" usefile="false" />
            <formatter type="xml" />
            <test name="${testcase}" todir="${junit.results}" />
        </junit>
    </target>

    <target name="vizant">
        <taskdef name="vizant" classname="vizant.Vizant">
            <classpath>
                <fileset refid="vizant.lib" />
            </classpath>
        </taskdef>
        <vizant antfile="build.xml" outfile="${target}/build.dot" />
        <exec executable="dot">
            <arg line="-Tpng ${target}/build.dot -o ${target}/build.png" />
        </exec>
    </target>

    <target name="logger.jar">
        <ant dir="loggers"/>
        <copy file="loggers/target/dist/cruisecontrol-antprogresslogger.jar" todir="dist"/>
    </target>
	
	<!-- Generates the config.xml documentation. -->
	<target name="gendoc" depends="compile">
		<java
			classname="net.sourceforge.cruisecontrol.gendoc.GendocMain"
			failonerror="true"
			classpathref="compile.out">
			
			<arg file="${gendoc.output}" />
		</java>
	</target>
	
	<!-- Merges the CSS files needed to format config.xml documentation into a single
	     file that will be included in the JAR. -->
	<target name="copy-css">
		<concat destfile="${gendoc.css}">
			<filelist dir="${project.root}/documentation"
				files="cruisecontrol.css,configxml-gendoc.css" />
		</concat>

        <copy todir="${classes}">
            <fileset dir="${src}" includes="${gendoc.css}"/>
        </copy>
	</target>

    <!-- remove gendoc generated files. -->
    <target name="clean-gendoc">
        <delete quiet="yes" file="${gendoc.css}"/>
        <delete quiet="yes" file="${gendoc.output}"/>
    </target>


    <!-- @todo Move this check to "common", use props files to fetch prior release version to more stable dir (like cc-config),
     allow running on other jars (reporting, ccdist, etc), and move clirr-core-uber.jar to shared lib-buildtools dir -->
    <target name="checkbinarycompatibility" depends="jar">
        <taskdef resource="clirrtask.properties">
            <!--
              ~  buildtools.classpath should either contain clirr-core-uber.jar or alternatively
              ~  clirr-core.jar and the libraries it depends on
              -->
            <classpath>
                <fileset refid="clirr.lib" />
            </classpath>
        </taskdef>

        <!--value="${ant.project.name}-${compatibility.baseline.version}.jar"/>-->
        <property
                name="jar.baseline"
                value="cruisecontrol-bin-2.7.3.zip"/>

        <!--src="${url.libbase}/${ant.project.name}/${jar.baseline}"-->
        <get
                src="http://downloads.sourceforge.net/cruisecontrol/cruisecontrol-bin-2.7.3.zip?modtime=1216237499&amp;big_mirror=0"
                dest="${target}/tmp/${jar.baseline}"
                verbose="on" usetimestamp="true"/>
        <unzip src="${target}/tmp/${jar.baseline}" dest="${target}/tmp/cc-jar/" />

        <clirr>
            <origfiles dir="${target}/tmp/cc-jar/cruisecontrol-bin-2.7.3/lib" includes="cruisecontrol*.jar"/>
            <origclasspath>
                <fileset dir="${target}/tmp/cc-jar/cruisecontrol-bin-2.7.3/lib" includes="**/*.jar" excludes="cruisecontrol*.jar"/>
            </origclasspath>

            <newfiles dir="${dist}" includes="cruisecontrol*.jar"/>
            <newclasspath>
                <fileset dir="lib" includes="**/*.jar" />
            </newclasspath>

             <!--<formatter type="xml" outfile="${target}/clirr.xml" />-->
            <!-- TODO: example for 3rd party classpath -->
        </clirr>
    </target>
</project>
