<!--********************************************************************************
 * CruiseControl, a Continuous Integration Toolkit
 * Copyright (c) 2001, ThoughtWorks, Inc.
 * 651 W Washington Ave. Suite 500
 * Chicago, IL 60661 USA
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 *     + Redistributions of source code must retain the above copyright 
 *       notice, this list of conditions and the following disclaimer. 
 *       
 *     + Redistributions in binary form must reproduce the above 
 *       copyright notice, this list of conditions and the following 
 *       disclaimer in the documentation and/or other materials provided 
 *       with the distribution. 
 *       
 *     + Neither the name of ThoughtWorks, Inc., CruiseControl, nor the 
 *       names of its contributors may be used to endorse or promote 
 *       products derived from this software without specific prior 
 *       written permission. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ********************************************************************************-->

<project name="CruiseControl" default="all" basedir=".">

    <property name="docs" value="docs"/>
    <property name="apidocs" value="${docs}/api"/>
        
    <property name="classes" value="classes"/>    
    <property file="cruise-build.properties" />   
    <property name="dist" value="dist"/>
    <property name="images" value="images"/>
    <property name="junit.results" value="test-results" />
    <property name="lib" value="lib"/>
    <property name="src" value="src"/>
    <property name="test" value="test"/>    
    
    <path id="project.classpath" >
        <fileset dir="lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>
    
    <target name="init">     
        <mkdir dir="${classes}"/>
        <mkdir dir="${dist}"/>
        <mkdir dir="${apidocs}"/>
    </target>
    
    <target name="clean">
       <delete dir="${dist}"/>
       <mkdir dir="${dist}"/>
       <delete dir="${classes}"/>
       <mkdir dir="${classes}"/>
    </target>
    
    <target name="compile" depends="init">
        <javac srcdir="${src}" destdir="${classes}" classpathref="project.classpath" debug="true" deprecation="true"/>
        <copy todir="${classes}">
            <fileset dir="${src}" includes="**/*.properties"/>
        </copy>
    </target>
  
    <target name="test" depends="init">
        <delete dir="${junit.results}"/>
        <mkdir dir="${junit.results}" />
        <javac srcdir="${test}" destdir="${classes}" classpathref="project.classpath" />

        <junit fork="yes" haltonfailure="yes" >
            <classpath >
                <path refid="project.classpath" />
                <pathelement location="${classes}" />
            </classpath>
            <formatter type="plain" usefile="false" />
            <formatter type="xml" />
            <batchtest todir="${junit.results}" >
                <fileset dir="${classes}" includes="**/*Test.class" />
            </batchtest>
        </junit>
    </target>
    
    <target name="release" depends="jar, war">
        <property name="release.zip" value="cruisecontrol.zip"/>
        <delete file="${dist}\${release.zip}"/>
        <zip zipfile="${dist}\${release.zip}">
            <fileset dir="${dist}" includes="*.jar, *.war"/>
            <fileset dir="." 
             includes="${docs}/**, ${lib}/**, *.txt, cruiseControl.bat, cruiseControl.sh"/>
            <fileset dir="${src}" includes="*.properties" />
        </zip>
    </target>
    
    <target name="jar" depends="compile">
        <jar jarfile="${dist}\cruisecontrol.jar">
            <fileset dir="${classes}"/>
            <fileset dir="." includes="${src}/**" excludes="${src}/**/*.properties"/>
        </jar>
    </target>
    
    <target name="war" depends="jar">
        <javac srcdir="${src}" destdir="${classes}" classpathref="project.classpath"/>
        <war warfile="${dist}\buildservlet.war" webxml="web.xml">
           <lib dir="${lib}">
              <include name="servlet.jar"/>
              <include name="xerces.jar"/>
              <include name="xalan.jar"/>
           </lib>
           <classes dir="${classes}">
              <include name="net/sourceforge/cruisecontrol/BuildServlet*"/>
           </classes>
           <fileset dir=".">
              <include name="${images}/**"/>
              <include name="cruisecontrol.xsl"/>
              <include name="templates/**"/>
              <include name="buildservlet.properties"/>
           </fileset>
        </war>
    </target>
    
                                                          
    <!-- ***** JAVADOC ***** -->

    <target name="javadoc" depends="init,compile">
       <javadoc sourcepath="${src}" destdir="${apidocs}" packagenames="net.sourceforge.cruisecontrol.*">
           <classpath>
               <path refid="project.classpath" />
               <pathelement location="${src}" />
           </classpath>
       </javadoc>
    </target>
                                                          
    <target name="all" depends="init,clean,compile,test,jar,war" />

    <!-- ***** CRUISE EXAMPLES ***** -->

    <target name="cvs-update" depends="init" if="localCopy">
        <cvs cvsroot=":pserver:anonymous@cvs.cruisecontrol.sourceforge.net:/cvsroot/cruisecontrol"
             package="cruisecontrol" dest="${localCopy}" />
    </target>

    <target name="cruise-check" depends="init" if="localCopy" >
        <tstamp />
        <property name="modificationset.file" value="modifications.xml" />
        <taskdef name="modificationset" classname="net.sourceforge.cruisecontrol.ModificationSet" />

        <modificationset lastbuild="${lastBuildAttemptTime}" quietperiod="300">
            <cvselement cvsroot=":pserver:anonymous@cvs.cruisecontrol.sourceforge.net:/cvsroot/cruisecontrol" 
                        localworkingcopy="${localCopy}/cruisecontrol" />
        </modificationset>
    </target>

    <target name="cruise" depends="init,cruise-check" >
        <antcall target="cvs-update" />
        <ant antfile="${localCopy}/cruisecontrol/build.xml" target="all" />
    </target>

    <target name="cruise-clean" depends="init,cruise-check" >
        <antcall target="cvs-update" />
        <ant antfile="${localCopy}/cruisecontrol/build.xml" target="clean" />
        <ant antfile="${localCopy}/cruisecontrol/build.xml" target="all" />
    </target>
</project>                                                                       
