<!--****************************************************************************
 * CruiseControl, a Continuous Integration Toolkit
 * Copyright (c) 2001, ThoughtWorks, Inc.
 * 200 E. Randolph, 25th Floor
 * Chicago, IL 60601 USA
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *     + Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *     + Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 *
 *     + Neither the name of ThoughtWorks, Inc., CruiseControl, nor the
 *       names of its contributors may be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ****************************************************************************-->

<project name="CruiseControl" default="dist" basedir=".">
    <property name="project.root" location="${basedir}/.." />
    <property name="ant.scripts" location="${project.root}/.ant-scripts" />

    <import file="${ant.scripts}/build-dependencies.xml"/>

    <property environment="env" />
    <property file="override.properties" />

    <!-- define cc.version -->
    <property file="../build.properties" />
    <!-- Use a local variable to make sure that a script that would read the
         properties file would still be capable of overidding this one.
         Note: the release.xml overrides this property -->
    <property name="cc.release.label" value="${cc.version}" />

    <property name="target" value="${basedir}/target" />
    <property name="reports.dir" value="${target}/reports" />

    <property name="classes" value="${target}/classes" />
    <property name="dist" value="dist" />
    <property name="junit.results" value="${target}/test-results" />
    <property name="src" value="${basedir}/src" />
    <property name="test" value="${basedir}/test" />
    <property name="functionaltest" value="${basedir}/functionaltest" />
    <property name="test.classes" value="${target}/test-classes" />
    <property name="tests" value="*Test" />
    <property name="xsl" value="${basedir}/xsl" />

    <property name="checkstyle.cache" value="${target}/checkstyle.cache" />
    <property name="checkstyle.config" value="../common/checkstyle.xml"/>

    <import file="build-paths.xml" />

    <path id="checkstyle.classpath">
        <fileset refid="checkstyle.lib" />
    </path>

    <property name="emma.results" value="${target}/emma-results" />
    <property name="emma.stats" value="${emma.results}/coverage.emma" />

    <import file="../common/checkstyle-build.xml"/>

    <path id='emma.classpath'>
        <fileset refid="emma.lib" />
        <fileset refid="emma.ant.lib" />
    </path>
    <taskdef resource="emma_ant.properties" classpathref="emma.classpath" />

    <target name="checklabel">
        <fail unless="cc.release.label" message="label is not defined." />

        <echo>Java: ${java.version} (${java.vm.name})</echo>
        <echo>   in ${java.home}</echo>
        <echo>Ant: ${ant.version}</echo>
        <echo>   in ${ant.home}</echo>
        <echo>CruiseControl: ${cc.release.label}</echo>        
    </target>

    <target name="init" description="Setup build system" depends="checklabel">
        <mkdir dir="${classes}" />
        <mkdir dir="${test.classes}" />
        <mkdir dir="${target}/tmp" />
        <mkdir dir="${dist}" />
        <mkdir dir="${junit.results}" />
        <mkdir dir="${emma.results}" />

        <available file="${env.NANT_HOME}/NAnt.exe" property="nant-present" />

        <tstamp />
        <property name="build.version" value="${cc.release.label}" />
        <property name="build.version.info" value="Compiled on ${TODAY} ${TSTAMP}" />
    </target>

    <target name="clean" description="Cleans out the build directories">
        <delete quiet="yes">
            <fileset dir="${dist}" />
        </delete>
        <delete dir="${target}" />

        <ant dir="loggers" target="clean"/>
    </target>

    <macrodef name="compile-macro">
        <attribute name="destdir" default="${classes}" />
        <attribute name="srcdir" default="${src}" />
        <attribute name="classpathref" default="compile.path" />
        <element name="nested" implicit="true" optional="true" />
        <sequential>
            <javac destdir="@{destdir}" debug="true" deprecation="true" fork="true" source="1.5" target="1.5" compiler="javac1.5" classpathref="@{classpathref}" srcdir="@{srcdir}">
                <nested />
                <!-- @todo add other compiler warning flags -->
                <compilerarg value="-Xlint:unchecked"/>
            </javac>
        </sequential>
    </macrodef>

    <target name="compile" depends="init, logger.jar" unless="compile.skip" description="Compile source code">
        <compile-macro classpathref="compile.path" />

        <copy todir="${classes}">
            <fileset dir="${basedir}" includes="*.properties" />
            <filterset>
                <filter token="VERSION" value="${build.version}" />
                <filter token="VERSION_INFO" value="${build.version.info}" />
            </filterset>
        </copy>
        <!-- copy resources like properties from the src-dir -->
        <copy todir="${classes}">
            <fileset dir="${src}" excludes="**/*.java" />
        </copy>
    </target>

    <target name="compile-test" depends="compile" description="Compile test code">
        <compile-macro srcdir="${test}" destdir="${test.classes}" classpathref="test.unit.compile.path" />

        <copy todir="${test.classes}">
            <fileset dir="${test}" includes="**/*.xml" />
            <fileset dir="${test}" includes="**/*.txt" />
            <fileset dir="${test}" includes="**/*.jar" />
            <fileset dir="${test}" includes="**/*.properties" />
        </copy>
    </target>

    
    <target name="compile-functional-test"  depends="compile">
        <compile-macro srcdir="${functionaltest}" destdir="${test.classes}" classpathref="test.functional.compile.path" />
        <copy todir="${test.classes}">
            <fileset dir="${functionaltest}" excludes="**/*.java" />
        </copy>
    </target>

    <target name="emma-instrument" depends="init, compile">
        <emma>
            <instr instrpath="${classes}" outdir="${classes}" merge="yes" metadatafile="${emma.results}/metadata.emma" mode="overwrite" />
        </emma>
    </target>

    <target name="report-emma" depends="init, emma-instrument, test">
        <property name="emma.html.report" value="${emma.results}/coverage.html" />
        <emma>
            <report sourcepath="${src}">
                <fileset dir="${emma.results}">
                    <include name="*.emma" />
                </fileset>

                <html outfile="${emma.html.report}" />
            </report>
        </emma>
        <echo message="View EMMA's HTML report at ${emma.html.report}" />
    </target>

    <macrodef name="test-macro">
        <attribute name="includes" default="**/${tests}.class" />
        <attribute name="excludes" default="" />
        <attribute name="classpathref" default="test.unit.run.path" />
        <element implicit="true" name="nested" optional="true" />
        <sequential>
            <junit fork="true" forkmode="perBatch" haltonfailure="false" printsummary="true" dir="${target}" failureproperty="test.failed">
                <classpath>
                    <path refid="@{classpathref}" />
                </classpath>
                <formatter type="brief" usefile="false" />
                <formatter type="xml" />
                <batchtest todir="${junit.results}">
                    <fileset dir="${test.classes}" includes="@{includes}" excludes="@{excludes}" />
                </batchtest>
                <nested />
            </junit>
        </sequential>
    </macrodef>

    <target name="test" depends="compile-test" unless="test.skip" description="Executes the unit tests">
        <test-macro excludes="**/ThreadQueueTest*" classpathref="test.unit.run.path">
            <jvmarg value="-Demma.coverage.out.file=${emma.stats}" />
            <jvmarg value="-Demma.coverage.out.merge=true" />
        </test-macro>

        <mkdir dir="target/test-report"/>
        <junitreport todir="target/test-report">
          <fileset dir="${junit.results}">
            <include name="TEST-*.xml"/>
          </fileset>
          <report format="frames" todir="target/test-report"/>
        </junitreport>

        <fail if="test.failed"/>
    </target>
    
    
    <target name="functional-test" depends="init, compile-functional-test" unless="test.skip" description="Executes the functional tests">
        <test-macro includes="**/BuildLoopMonitorTest.class" classpathref="test.functional.run.path" />
    </target>

    <target name="test-one" depends="compile-test" description="Executes one unit test" if="testcase">
        <junit fork="yes" haltonfailure="true" printsummary="true" dir="${target}">
            <classpath>
                <path refid="test.unit.run.path" />
            </classpath>
            <formatter type="brief" usefile="false" />
            <formatter type="xml" />
            <test name="${testcase}" todir="${junit.results}" />
        </junit>
    </target>

    <target name="jar" depends="compile">
        <jar jarfile="${dist}/cruisecontrol.jar">
            <manifest>
                <attribute name="Main-Class" value="CruiseControl" />
            </manifest>
            <fileset dir="${classes}" />
            <fileset dir="${xsl}" />
            <manifest>
                <attribute name="Implementation-Version" value="${build.version} ${build.version.info}" />
            </manifest>
        </jar>
        <jar jarfile="${dist}/cruisecontrol-launcher.jar">
            <manifest>
                <attribute name="Main-Class" value="net.sourceforge.cruisecontrol.launch.Launcher" />
            </manifest>
            <fileset dir="${classes}" includes="**/launch/**" />
        </jar>
    </target>

    <target name="javadoc" depends="init,compile" description="Generate the javadocs">
        <mkdir dir="target/javadoc" />
        <javadoc sourcepath="${src}" destdir="target/javadoc" packagenames="net.sourceforge.cruisecontrol.*" breakiterator="yes" failonerror="true">
            <classpath>
                <path refid="compile.path" />
                <fileset refid="ant.lib" />
                <fileset refid="ant-launcher.lib" />
                <pathelement location="${src}" />
            </classpath>
        </javadoc>
    </target>

    <target name="gendoc" depends="init,compile" description="generate the plugin documentation">
        <ant dir="../gendoc" target="all" inheritall="false"/>

        <java classname="net.sourceforge.cruisecontrol.gendoc.Gendoc">
            <classpath>
                <fileset refid="gendoc.lib"/>
                <fileset refid="log4j.lib"/>
                <fileset refid="qdox.lib"/>
                <fileset refid="velocity.lib"/>
                <fileset refid="velocity-dep.lib"/>
                <pathelement location="../gendoc/src/"/>
            </classpath>
        </java>

    </target>

    <target name="checkstyle" description="run checkstyle">
        <checkstyle-macro reportsdir="${reports.dir}" configfile="${checkstyle.config}" checkstylecache="${checkstyle.cache}">
            <taskdef resource="checkstyletask.properties" classpathref="checkstyle.classpath" />
        </checkstyle-macro>
    </target>

    <target name="all" depends="init, compile, checkstyle, test, functional-test, jar" description="Performs a build, runs tests, and builds jar" />

    <target name="dist" depends="clean, all" description="Performs a clean build, runs tests, and builds jar" />

    <target name="vizant" description="Visualise the Ant build file" >
        <path id="vizant.classpath">
            <fileset refid="vizant.lib" />
        </path>

        <taskdef name="vizant" classname="vizant.Vizant" classpathref="vizant.classpath" />
        <vizant antfile="build.xml" outfile="${target}/build.dot" />
        <exec executable="dot">
            <arg line="-Tpng ${target}/build.dot -o ${target}/build.png" />
        </exec>
    </target>

    <target name="logger.jar">
        <ant dir="loggers"/>
        <copy file="loggers/target/dist/cruisecontrol-antprogresslogger.jar" todir="dist"/>
    </target>

    <!-- @todo Move this check to "common", use props files to fetch prior release version to more stable dir (like cc-config),
     allow running on other jars (reporting, ccdist, etc), and move clirr-core-uber.jar to shared lib-buildtools dir -->
    <target name="checkbinarycompatibility" depends="jar">

        <!-- buildtools.classpath should either contain
         clirr-core-uber.jar or alternatively
         clirr-core.jar and the libraries it depends on -->
        <path id="buildtools.classpath">
            <fileset refid="clirr.lib" />
        </path>

        <taskdef
                classpathref="buildtools.classpath"
                resource="clirrtask.properties"/>

        <!--value="${ant.project.name}-${compatibility.baseline.version}.jar"/>-->
        <property
                name="jar.baseline"
                value="cruisecontrol-bin-2.7.3.zip"/>

        <!--src="${url.libbase}/${ant.project.name}/${jar.baseline}"-->
        <get
                src="http://downloads.sourceforge.net/cruisecontrol/cruisecontrol-bin-2.7.3.zip?modtime=1216237499&amp;big_mirror=0"
                dest="${target}/tmp/${jar.baseline}"
                verbose="on" usetimestamp="true"/>
        <unzip src="${target}/tmp/${jar.baseline}" dest="${target}/tmp/cc-jar/" />

        <clirr>
            <origfiles dir="${target}/tmp/cc-jar/cruisecontrol-bin-2.7.3/lib" includes="cruisecontrol*.jar"/>
            <origclasspath>
                <fileset dir="${target}/tmp/cc-jar/cruisecontrol-bin-2.7.3/lib" includes="**/*.jar" excludes="cruisecontrol*.jar"/>
            </origclasspath>

            <newfiles dir="${dist}" includes="cruisecontrol*.jar"/>
            <newclasspath>
                <fileset dir="${lib}" includes="**/*.jar" />
            </newclasspath>

             <!--<formatter type="xml" outfile="${target}/clirr.xml" />-->
            <!-- TODO: example for 3rd party classpath -->
        </clirr>

    </target>

</project>
