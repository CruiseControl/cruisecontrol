<!--****************************************************************************
 * CruiseControl, a Continuous Integration Toolkit
 * Copyright (c) 2001, ThoughtWorks, Inc.
 * 651 W Washington Ave. Suite 500
 * Chicago, IL 60661 USA
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *     + Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *     + Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 *
 *     + Neither the name of ThoughtWorks, Inc., CruiseControl, nor the
 *       names of its contributors may be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ****************************************************************************-->

<project name="CruiseControl" default="all" basedir=".">
    <property environment="env"/>
    <property file="override.properties"/>

    <property name="docs" value="docs"/>
    <property name="apidocs" value="${docs}/api"/>
    <property name="bin" value="bin"/>
    <property name="classes" value="classes"/>
    <property name="dist" value="dist"/>
    <property name="images" value="images"/>
    <property name="junit.results" value="test-results" />
    <property name="lib" value="lib"/>
    <property name="src" value="src"/>
    <property name="test" value="test"/>
    <property name="tests" value="*Test"/>

    <property name="checkstyle.fail.on.violation" value="true"/>
    <property name="checkstyle.jar" value="${lib}/checkstyle-all-3.0.jar"/>

    <property name="clover.home" value="${env.CLOVER_HOME}"/>
    <property name="clover.jar" value="${clover.home}/lib/clover.jar"/>
    <property name="clover.results" value="clover-results"/>

    <path id="clover.classpath">
        <pathelement location="${clover.jar}"/>
    </path>
    
    <!-- ****************************************************
    Define the project classpath references.  Any jar found
    in lib directory will be included in CLASSPATH
    **************************************************** -->
    <path id="project.classpath" >
        <fileset dir="lib">
            <exclude name="ant.jar"/>
            <exclude name="optional.jar"/>
        </fileset>
    </path>

    <!-- **************************************************** -->
    <!-- Define the runtime classpath references              -->
    <!-- **************************************************** -->
    <path id="project.runtime.classpath" >
        <path refid="project.classpath" />
        <pathelement location="${classes}" />
        <pathelement path="${java.class.path}"/>
        <path refid="clover.classpath"/>
    </path>

    <!-- **************************************************** -->
    <!-- Init target for setting up the build system          -->
    <!-- **************************************************** -->
    <target name="init" description="Setup build system">
        <mkdir dir="${classes}"/>
        <mkdir dir="${dist}"/>
        <mkdir dir="${junit.results}"/>
        <mkdir dir="${clover.results}"/>
        <available file="lib/starteam-sdk.jar" property="starteam-sdk-present"/>
        <tstamp/>
        <property name="label" value="2.1 Compiled on ${TODAY} ${TSTAMP}"/>
    </target>

    <!-- **************************************************** -->
    <!-- Cleans out the build directories                     -->
    <!-- **************************************************** -->
    <target name="clean" description="Cleans out the build directories" >
       <delete quiet="yes">
            <fileset dir="dist" includes="*.jar, *.war, *.zip"/>
       </delete>
       <delete dir="${classes}" quiet="yes"/>
       <delete dir="${apidocs}" quiet="yes"/>
       <delete dir="${junit.results}" quiet="yes"/>
       <delete dir="${clover.results}" quiet="yes"/>
       <delete>
            <fileset dir="${basedir}" includes="_*" />
       </delete>
    </target>

    <!-- **************************************************** -->
    <!-- Clean up test result files                           -->
    <!-- **************************************************** -->
    <target name="clean-testresults" description="Cleans up after the tests">
       <delete file="final.xml" quiet="yes"/>
       <delete file="log.xml" quiet="yes"/>
       <delete file="logFileOne.xml" quiet="yes"/>
       <delete file="logFileTwo.xml" quiet="yes"/>
       <delete dir="_auxLogs" quiet="yes"/>
       <delete file="myproject" quiet="yes"/>
       <delete file="_" quiet="yes">
          <fileset dir=".">
             <include name="log*.xml"/>
             <include name="_*"/>
          </fileset>
       </delete>
    </target>

    <!-- **************************************************** -->
    <!-- Compiles the source code                             -->
    <!-- **************************************************** -->
    <target name="compile" depends="init" description="Compiles source code">
        <javac destdir="${classes}" debug="true" deprecation="true">
           <classpath refid="project.classpath"/>
           <src path="${src}"/>
           <exclude name="**/element/"/>
           <exclude name="**/StarTeam*"/>
        </javac>
        <copy todir="${classes}">
            <fileset dir="." includes="log4j.properties"/>
            <fileset dir="." includes="version.properties"/>
            <filterset>
                <filter token="VERSION" value="${label}" />
            </filterset>
        </copy>
    </target>

    <target name="compile-starteam" if="starteam-sdk-present" depends="init">
        <javac destdir="${classes}" debug="true" deprecation="true">
            <classpath refid="project.classpath"/>
            <src path="${src}"/>
            <include name="**/StarTeam*"/>
            <exclude name="**/element/"/>
        </javac>
    </target>

    <target name="compile-test" depends="compile" 
        description="Compile test code">

        <javac debug="on" deprecation="true" srcdir="${test}" 
            destdir="${classes}" excludes="**/element/,**/*StarTeam*" 
            classpathref="project.classpath" />

        <copy todir="${classes}">
            <fileset dir="${test}" includes="**/*.xml"/>
        </copy>
    </target>

    <!-- **************************************************** -->
    <!-- Run style check on code -->
    <!-- **************************************************** -->
    <target name="checkstyle"
          description="Generates a report of code convention violations.">

        <taskdef resource="checkstyletask.properties" classpath="${checkstyle.jar}"/>
        <checkstyle config="checkstyle.xml" failOnViolation="${checkstyle.fail.on.violation}">
            <formatter type="plain"/>
            <formatter type="plain" tofile="checkstyleResults.txt"/>
            <fileset dir="src" includes="net/sourceforge/cruisecontrol/**/*.java"/>
            <fileset dir="test" includes="net/sourceforge/cruisecontrol/**/*.java"/>
        </checkstyle>
    </target>

    <!-- **************************************************** -->
    <!-- Initialize Clover. -->
    <!-- **************************************************** -->
    <target name="report-coverage" depends="with-clover, clean, compile, compile-test, test, report-clover" 
        description="Check test coverage"/>
    
    <target name="report-clover" depends="with-clover">
        <clover-report>
            <current outfile="${clover.results}" title="CruiseControl test coverage">
                <format type="html"/>
                <fileset dir="${src}"/>
            </current>   
        </clover-report>
    </target>

    <target name="with-clover">
        <fail message="CLOVER_HOME must be set!" unless="env.CLOVER_HOME"/>
        <fail message="Can't get Clover to work with Jikes..." 
            if="env.JIKESPATH"/>
        <taskdef resource="clovertasks" classpathref="clover.classpath"/>
        <clover-setup initstring="${clover.results}/cc_coverage.db"/>
    </target>

    <!-- **************************************************** -->
    <!-- Run duplication check on code -->
    <!-- **************************************************** -->
    <target name="check-duplication" description="Check for duplicated code">
        <fail message="SIMIAN_HOME must be set!" unless="env.SIMIAN_HOME"/>
        <taskdef resource="simiantask.properties" classpath="${env.SIMIAN_HOME}/simian.jar"/>
        <simian failOnDuplication="false">
            <fileset dir="${src}" includes="**/*.java"/>
        </simian>        
    </target>

    <!-- **************************************************** -->
    <!-- Executes the unit tests                              -->
    <!-- **************************************************** -->
    <target name="test" depends="compile-test" description="Executes the unit tests">
        <junit fork="yes" haltonfailure="yes" printsummary="on" >
            <classpath >
                <path refid="project.runtime.classpath" />
            </classpath>
            <formatter type="brief" usefile="false"/>
            <formatter type="xml" />
            <batchtest todir="${junit.results}" >
                <fileset dir="${classes}" includes="**/${tests}.class" excludes="**/element/" />
            </batchtest>
        </junit>
    </target>

    <target name="test-starteam" depends="init" if="starteam-sdk-present">
        <javac debug="on" deprecation="true" srcdir="${test}" destdir="${classes}" classpathref="project.classpath">
            <classpath refid="project.classpath"/>
            <src path="${test}"/>
            <include name="**/StarTeam*"/>
        </javac>
        <junit fork="yes" haltonfailure="yes" printsummary="on" >
            <classpath >
                <path refid="project.runtime.classpath" />
            </classpath>
            <formatter type="brief" usefile="false"/>
            <formatter type="xml" />
            <batchtest todir="${junit.results}" >
                <fileset dir="${classes}" includes="**/StarTeamTest.class" />
            </batchtest>
        </junit>

    </target>

    <!-- **************************************************** -->
    <!-- Builds the jar                                       -->
    <!-- **************************************************** -->
    <target name="jar" depends="compile">
        <jar jarfile="${dist}\cruisecontrol.jar" manifest="manifest.mf">
            <fileset dir="${classes}"/>
        </jar>
    </target>

    <!-- **************************************************** -->
    <!-- Generates the javadocs                               -->
    <!-- **************************************************** -->
    <target name="javadoc" depends="init,compile" description="Generate the javadocs">
       <mkdir dir="${apidocs}"/>

       <javadoc sourcepath="${src}" destdir="${apidocs}" packagenames="net.sourceforge.cruisecontrol.*">
           <classpath>
               <path refid="project.classpath" />
               <pathelement location="${src}" />
           </classpath>
       </javadoc>
    </target>


    <!-- ****************************************************** -->
    <!-- Performs a clean build, runs tests, and builds jar/war -->
    <!-- ****************************************************** -->
    <target name="all" depends="clean,init,checkstyle,compile,compile-starteam,test,test-starteam,jar,clean-testresults" description="Performs a clean build, runs tests, and builds jar" />

    <!-- ****************************************************** -->
    <!-- Updates local code with cvs changes                    -->
    <!-- ****************************************************** -->
    <target name="cvs-update" depends="init" if="localCopy">
        <cvs command="update -d -P" cvsroot=":pserver:anonymous@cvs.cruisecontrol.sourceforge.net:/cvsroot/cruisecontrol"
             package="cruisecontrol" dest="${localCopy}" />
    </target>

</project>
