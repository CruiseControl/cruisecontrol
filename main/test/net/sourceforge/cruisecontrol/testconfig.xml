<!-- note we parametrize the ${test.properties.dir} location using a specified global properties -->
<cruisecontrol>
  <property name='global' value='works!'/>
  <property name='project.global' value='project=${project.name}'/>

  <!-- Check for infinite recursion  properties catch -->
  <property name='recursive1' value='${recursive2}'/>
  <property name='recursive2' value='${recursive1}'/>

  <plugin name='testnested'
          classname='net.sourceforge.cruisecontrol.listeners.ListenerTestNestedPlugin'
          string='default' otherstring='otherdefault'/>

  <plugin name='mock.project'
          classname='net.sourceforge.cruisecontrol.MockProjectInterface'>
  </plugin>

  <plugin name='project'>
    <property name='x' value='y'/>
    <schedule interval='20' >
      <ant multiple='1' buildfile='tmp/foo/bazz.xml' target='baz' />
    </schedule>
  </plugin>

  <mock.project name='project1' >
    <foo name="${project.name}" />
  </mock.project>

  <project name='preconfigured.project' >
  </project>

  <project name='project2' >
    <bootstrappers>
      <vssbootstrapper vsspath='foo' localdirectory='${test.properties.dir}' />
    </bootstrappers>
    <schedule interval='20' >
      <ant multiple='1' buildfile='tmp/foo/bar.xml' target='baz' />
    </schedule>
    <modificationset quietperiod='10' >
      <vss vsspath='tmp/foo/bar' login='login' />
    </modificationset>
    <log dir='${test.properties.dir}/foo' encoding='utf-8' >
      <merge file='blah' />
    </log>
    <labelincrementer separator='#' />
    <listeners>
      <currentbuildstatuslistener file='status.txt'/>
    </listeners>
  </project>

  <mock.project name='project.global' >
    <foo name="${project.global}" />
  </mock.project>

   <!-- test plugin configuration inside a project -->
  <project name='project4' >
     <!-- property resolution should still work -->
    <property name='default.testlistener.name' value='${project.name}-0'/>
     <!-- to check overriding plugin & defaults. No need to respecify class -->
    <plugin name='testnested' string='overriden'/>
    <!-- to test nested plugins -->
    <plugin name='testlistener' string='${default.testlistener.name}'
            classname='net.sourceforge.cruisecontrol.listeners.ListenerTestPlugin'>
      <testnested string='nested'/>
      <stringwrapper string='wrapper1'/>
    </plugin>
    <listeners>
      <testlistener/> <!-- override -->
      <testlistener string='listener1'/>
      <testlistener string='listener2'>
        <stringwrapper string='wrapper2-${global}'/>
      </testlistener>
    </listeners>
  </project>

  <!-- test plugin configuration inside a project -->
  <project name='project5' >
    <!-- to check overriding plugin & defaults. No need to respecify class -->
    <plugin name='testnested'
            classname='net.sourceforge.cruisecontrol.listeners.ListenerTestOtherNestedPlugin'
            string='notshadowing' otherotherstring='otherother'/>
    <!-- to test nested plugins -->
    <plugin name='testlistener' string='default'
            classname='net.sourceforge.cruisecontrol.listeners.ListenerTestPlugin'>
      <testnested/>
    </plugin>
    <!-- override -->
    <listeners>
      <testlistener/>
    </listeners>
  </project>

  <mock.project name='propsfromfile' >
    <property file='${test.properties.dir}/test.properties' />
    <foo name="${multi}"/>
  </mock.project>

  <mock.project name='propsinpropsdef' >
    <property name='propsfilename' value='${test.properties.dir}/test.properties' />
    <property file='${propsfilename}' />
    <property name='env.toupper' value='true' />
    <property name='env.prefix' value='env' />
    <property environment='${env.prefix}' toupper='${env.toupper}' />
    <property name='test' value='test' />
    <property name='${test}1' value='test1' />
    <foo name="${env.PATH}"/>
   </mock.project>

  <mock.project name='simpleprops' >
    <property name='simple' value='success!'/>
    <foo name="${simple}" />
  </mock.project>

  <mock.project name='simple.global'>
    <foo name="${global}" />  
  </mock.project>

  <mock.project name='multiprops' >
    <property name='first' value='one'/>
    <property name='second' value='two'/>
    <property name='third' value='three'/>
    <property name='multi' value='${first}.${second}$${third}'/>
    <foo name="${multi}"/>
  </mock.project>

  <mock.project name='nestedprops' >
    <property name='first' value='one'/>
    <property name='second' value='two'/>
    <property name='third' value='three'/>
    <property name='one.two.three' value='almost'/>
    <property name='almost' value='threeLevelsDeep'/>
    <property name='nested' value='${${${first}.${second}.${third}}}'/>
    <foo name="${nested}" />
  </mock.project>

  <project name='missingprop' >
    <log dir='${missing}'/>
  </project>

  <mock.project name='eclipseprop' >
    <property name='global' value='eclipsed'/>
    <foo name="${global}" />
  </mock.project>

  <project name='logpreconfigured' >
    <plugin name='log' dir='mylogs/${project.name}' encoding='utf128' >
      <merge dir='${project.name}/target/test-reports'/>
    </plugin>
    <log>
      <merge dir='${project.name}/target/other-test-reports'/>
    </log>
  </project>


  <!-- tests various ways of overriding -->
  <plugin name='execa' from='exec' command='cA' workingdir='dA'/>
  <plugin name='execb' from='exec' command='cB' workingdir='dB'/>
  <plugin name='execc' from='exec' command='cC' workingdir='dC'/>
  <plugin name='execd' from='exec' command='cD' workingdir='dD'/>
  <plugin name='exece' from='exec' command='cE' workingdir='dE'/>

  <property name="glob.templ" value="filled_${local}"/>

  <plugin name='inherit' from='project'>
    <plugin name='exec1' from='exec' inherits='execa' command='cX' />
    <plugin name='exec2' from='exec' inherits='execb' />
    <plugin name='exec3' from='exec' command='cZ' />

    <schedule>
      <exec1/>
      <exec2/>
      <exec3/>
      <exec4/>
      <exec5/>
    </schedule>

    <property name="prop1" value="${global}"/>  <!-- filled by global property, but can be redefined -->
    <property name="prop3" value="${glob.templ}"/> <!-- filled by global property, but with missing item -->
    <property name="prop2" value="${local}"/> <!-- filled by project-specific property -->

    <plugin name='testlistener' classname='net.sourceforge.cruisecontrol.listeners.ListenerTestPlugin' />
    <listeners>
      <testlistener string='${prop1}'/> <!-- Uses property with value resolved later -->
      <testlistener string='${prop2}'/>
      <testlistener string='${prop3}'/>
      <testlistener string='${fitem}'/> <!-- In test.properties file -->
    </listeners>

    <property file="${test.properties.dir}/${prop2}.properties" />
  </plugin>

  <inherit name='inherit1'>
    <!-- At least exec4 and exec5 must be defined -->
    <plugin name='exec4' from='exec' command='c+' />
    <plugin name='exec5' from='exec' inherits='exece' command='c*' />

    <property name="prop1"   value="override"/> <!-- must overwrite the value already filled in template -->
    <property name="local"   value="test"/>
  </inherit>

  <inherit name='inherit2'>
    <plugin name='exec4' from='exec' command='c+' />
    <plugin name='exec5' from='exec' inherits='exece' command='c*' />
    <plugin name='exec3' from='exec' inherits='exec1' />

    <property file="${test.properties.dir}/test.properties" />
    <property name="fitem" value="${tempdir}" />

    <!-- Just to prevent "${prop2}.properties file not found" when read in plugin definition -->  
    <property name="local"   value="empty"/>
  </inherit>

  <inherit name='inherit3'>
    <plugin name='exec5' from='exec' inherits='exece' command='c*' />
    <plugin name='exec4' from='exec' command='c+' />
    <plugin name='exec1' from='exec' command='foo' />

    <!-- Just to prevent "${prop2}.properties file not found" when read in plugin definition -->  
    <property name="local"   value="empty"/>
  </inherit>


  <plugin name='mock.custom.prop'
          classname='net.sourceforge.cruisecontrol.MockCustomProperties'>
  </plugin>

  <plugin name='mock.project.props1'
          classname='net.sourceforge.cruisecontrol.MockProjectInterface'>
    <property file='${test.properties.dir}/test.properties' />
    <mock.custom.prop text="${mock.prop}"/>    <!-- mock.prop must be defined in a project -->
    <foo name="${mockkey_${mock.prop}}" />
  </plugin>
  <plugin name='mock.project.props2'
          classname='net.sourceforge.cruisecontrol.MockProjectInterface'>
    <mock.custom.prop text="${project.name}"/> <!-- defined automatically -->
    <foo name="${mockkey_${project.name}}" />
  </plugin>

  <mock.project.props1 name='customprops1' >
    <property file='${test.properties.dir}/test.properties' />
    <property name="mock.prop" value="${fitem}"/>
  </mock.project.props1>

  <mock.project.props2 name='customprops2' >
  </mock.project.props2>

  <mock.project.props1 name='customprops3' >
    <property name="mock.prop" value="${tempdir}"/> <!-- will be resolved from file -->
  </mock.project.props1>

  <mock.project name='customprops4' >
    <mock.custom.prop text="justval"/>
    <foo name="${mockkey_justval}" />
  </mock.project>


  <plugin name='mock.project.props3'
          classname='net.sourceforge.cruisecontrol.MockProjectInterface'>
    <property name="glob.templ" value="${local}_filled"/>
    <foo name="${glob.templ}" />
  </plugin>

  <mock.project.props3 name='customprops5' >
    <property name="local"   value="local-in-customprops5"/>
  </mock.project.props3>

  <mock.project.props3 name='customprops6' >
    <property name="local"   value="local-in-customprops6"/>
    <property name="glob.templ" value="${local}_filled_${global}"/>
  </mock.project.props3>

  <mock.project name='settings' >
    <foo name="${launch.ccname} + ${launch.user}" />
  </mock.project>

</cruisecontrol>
