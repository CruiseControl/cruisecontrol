<!--********************************************************************************
 * CruiseControl, a Continuous Integration Toolkit
 * Copyright (c) 2001, ThoughtWorks, Inc.
 * 651 W Washington Ave. Suite 600
 * Chicago, IL 60661 USA
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *     + Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *     + Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 *
 *     + Neither the name of ThoughtWorks, Inc., CruiseControl, nor the
 *       names of its contributors may be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ********************************************************************************-->
<project name="reporting-jsp" default="war" basedir=".">
    <property environment="env"/>
    <property file="override.properties"/>

    <property name="dist" value="dist"/>
    <property name="target" value="target"/>
    <property name="deploy.dir" value="${dist}"/>
    <property name="lib" value="lib"/>
    <property name="src" value="src"/>
    <property name="classes" value="${target}/classes"/>
    <property name="test.classes" value="${target}/test-classes"/>
    <property name="temp.dir" value="${target}/tmp"/>
    <property name="docs" value="docs"/>
    <property name="test" value="test"/>
    <property name="test.results" value="${target}/test-results"/>
    <property name="tests" value="*Test"/>
    <property name="webcontent" value="webcontent"/>

    <property name="checkstyle.fail.on.violation" value="true"/>
    <property name="checkstyle.jar" value="${lib}/checkstyle-all-3.1.jar"/>

    <path id="project.runtime.classpath" >
        <fileset dir="${lib}">
            <include name="servlet*.jar"/>
            <include name="xalan*.jar"/>
            <include name="junit*.jar"/>
            <include name="cewolf*.jar"/>
            <include name="jfreechart*.jar"/>
            <include name="jcommon*.jar"/>
        </fileset>
        <pathelement location="${classes}"/>
        <pathelement location="${test.classes}"/>
    </path>

    <target name="clean">
        <delete dir="${target}"/>
    </target>

    <target name="init" depends="clean">
        <mkdir dir="${dist}"/>
        <mkdir dir="${classes}"/>
        <mkdir dir="${test.classes}"/>
        <mkdir dir="${test.results}"/>
        <mkdir dir="${temp.dir}"/>
    </target>

    <!-- **************************************************** -->
    <!-- Run duplication check on code -->
    <!-- **************************************************** -->
    <target name="check-duplication" if="env.SIMIAN_HOME" description="Check for duplicated code">
        <taskdef resource="simiantask.properties" classpath="${env.SIMIAN_HOME}/simian.jar"/>
        <!-- Simian is failing even if no duplicated lines? -->
        <simian failOnDuplication="false">
            <fileset dir="${src}" includes="**/*.java"/>
        </simian>        
    </target>

    <!-- **************************************************** -->
    <!-- Run style check on code -->
    <!-- **************************************************** -->
    <target name="checkstyle" depends="init" description="Generates a report of code convention violations.">
        <taskdef resource="checkstyletask.properties" classpath="${checkstyle.jar}"/>
        <checkstyle config="checkstyle.xml" failOnViolation="${checkstyle.fail.on.violation}">
            <formatter type="plain"/>
            <formatter type="plain" tofile="${target}/checkstyleResults.txt"/>
            <fileset dir="${src}" includes="**/*.java"/>
            <fileset dir="${test}" includes="**/*.java"/>
        </checkstyle>
    </target>

    <target name="compile" depends="init,check-duplication,checkstyle">
        <javac srcdir="${src}" destdir="${classes}" debug="true">
            <classpath refid="project.runtime.classpath" />
        </javac>
    </target>

    <target name="compile-test" depends="compile"
        description="Compile test code">
        <javac srcdir="${test}" destdir="${test.classes}" debug="true">
            <classpath refid="project.runtime.classpath"/>
        </javac>
    </target>

    <target name="test" depends="compile-test" description="Executes the unit tests">
        <junit fork="yes" forkmode="perBatch" haltonfailure="yes" printsummary="on" dir="${target}">
            <classpath refid="project.runtime.classpath" />
            <formatter type="brief" usefile="false" />
            <formatter type="xml"/>
            <batchtest todir="${test.results}" >
                <fileset dir="${test.classes}" includes="**/${tests}.class" />
            </batchtest>
        </junit>
    </target>

    <target name="test-one" depends="compile-test" description="Executes one unit test" if="testcase">
        <junit fork="yes" haltonfailure="yes" printsummary="on" dir="${target}">
            <classpath refid="project.runtime.classpath" />
            <formatter type="brief" usefile="false"/>
            <formatter type="xml"/>
            <test name="${testcase}" todir="${test.results}"/>
        </junit>
    </target>

    <target name="create-web-xml" depends="-set.log.dir, -set.status.file, -set.artifacts.dir">
        <filter token="YOUR CRUISECONTROL LOG DIRECTORY" value="${user.log.dir}" />
        <filter token="CURRENT BUILD STATUS FILE" value="${user.build.status.file}" />
        <filter token="cruise.build.artifacts.dir" value="${cruise.build.artifacts.dir}"/>
        <copy filtering="true" todir="${temp.dir}" file="${webcontent}/WEB-INF/web.xml" />
    </target>

    <target name="-set.log.dir" unless="user.log.dir">
        <input message="WARNING! Property user.log.dir not set!  Please enter the absolute path to the CruiseControl logs directory:"
            addproperty="user.log.dir"/>
    </target>

    <target name="-set.status.file" unless="user.build.status.file">
        <input message="WARNING! Property user.build.status.file not set!  Please enter the absolute path to the current build status file:"
            addproperty="user.build.status.file"/>
    </target>

    <target name="-set.artifacts.dir" unless="cruise.build.artifacts.dir">
        <input message="WARNING! Property cruise.build.artifacts.dir not set!  Please enter the absolute path to the directory where additional build artifacts are stored:"
            addproperty="cruise.build.artifacts.dir"/>
    </target>
    
    <target name="war" depends="test, create-web-xml">
        <war warfile="${deploy.dir}/cruisecontrol.war" webxml="${temp.dir}/web.xml">
            <fileset dir="${webcontent}" excludes="WEB-INF/web.xml"/>
            <classes dir="${classes}"/>
            <lib dir="${lib}">
                <include name="xalan*.jar"  if="pre1.4"/>
                <include name="xerces*.jar" if="pre1.4"/>
                <include name="xml-apis*.jar" if="pre1.4"/>
                <include name="cewolf*.jar"/>
                <include name="commons-logging*.jar"/>
                <include name="jfreechart*.jar"/>
                <include name="jcommon*.jar"/>
                <include name="batik-svggen*.jar"/>
                <include name="batik-awt-util*.jar"/>
                <include name="batik-util*.jar"/>
            </lib>
        </war>
   </target>

</project>
