<!--********************************************************************************
 * CruiseControl, a Continuous Integration Toolkit
 * Copyright (c) 2001 ThoughtWorks, Inc.
 * 200 E. Randolph, 25th Floor
 * Chicago, IL 60601 USA
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *     + Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *     + Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 *
 *     + Neither the name of ThoughtWorks, Inc., CruiseControl, nor the
 *       names of its contributors may be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ********************************************************************************-->
<project name="reporting-jsp" default="clean-all">
    <description>
        CruiseControl reporting - original JSP webapp.
    </description>

    <property environment="env"/>
    <property file="override.properties"/>

    <!-- define version -->
    <property file="../../build.properties"/>

    <property name="dist" value="dist"/>
    <property name="target" value="target"/>
    <property name="reports.dir" value="${target}/reports" />
    <property name="deploy.dir" value="${dist}"/>
    <property name="src" value="src"/>
    <property name="classes" value="${target}/classes"/>
    <property name="test.classes" value="${target}/test-classes"/>
    <property name="temp.dir" value="${target}/tmp"/>
    <property name="test" value="test"/>
    <property name="test.results" value="${target}/test-results"/>
    <property name="tests" value="*Test"/>
    <property name="webcontent" value="webcontent"/>

    <property name="project.root" location="${basedir}/../.."/>

    <import file="${project.root}/.ant-scripts/build-properties.xml"/>

    <import file="build-paths.xml"/>

    <import file="${ant.scripts}/build-delegates.xml"/>

    <property name="checkstyle.cache" value="${target}/checkstyle.cache" />
    <property name="checkstyle.config" value="${project.root}/common/checkstyle.xml"/>

    <import file="${project.root}/common/checkstyle-build.xml"/>

    <import file="build-paths.xml" />

    <target name="clean" depends="-clean" description="--> Cleans all build artifacts and temporary files"/>

    <target name="dev" depends="-dev" description="--> Compiles all source code, runs all tests"/>

    <target name="package" depends="-package" description="--> Compiles, tests, and creates package for release"/>

    <!--
      ~  OVERRIDES:
      ~      The Ant targets below customize the behavior of the common Ant tasks for this module.
      -->

    <target name="-package" depends="war"/>

    <!--
      ~  DEPRECATED:
      ~      The Ant targets below are deprecated and will be removed in a future release.
      -->

    <target name="all" depends="init,compile,-checkstyle,test,war, jsp-precompile"/>
    <target name="checkstyle" depends="-checkstyle"/>
    <target name="clean-all" depends="clean, all"/>
    <target name="compile" depends="-compile"/>
    <target name="compile-test" depends="--test-unit-init,--test-unit-compile"/>
    <target name="javadoc" depends="-javadoc"/>
    <target name="test" depends="-test" unless="test.skip"/>

    <target name="init" depends="--compile-init,--javadoc-init,--package-init,--test-unit-init">
        <fail unless="cc.version" message="cc.version property is not defined. Check your build.properties"/>

        <echo>Java: ${java.version} (${java.vm.name})</echo>
        <echo>   in ${java.home}</echo>
        <echo>Ant: ${ant.version}</echo>
        <echo>   in ${ant.home}</echo>
        <echo>CruiseControl: ${cc.version}
        </echo>

        <tstamp/>
        <property name="label" value="${cc.version} Compiled on ${TODAY} ${TSTAMP}"/>
    </target>

    <!-- **************************************************** -->
    <!-- Run duplication check on code -->
    <!-- **************************************************** -->
    <target name="check-duplication">
        <taskdef resource="simiantask.properties" classpath="${simian.jar}" />
        <!-- Switch this to true with a threshold once we deal with current duplication -->
        <simian failOnDuplication="false">
            <fileset dir="${src}" includes="**/*.java" />
        </simian>
    </target>

    <target name="test-one" depends="compile-test" if="testcase">
        <junit fork="yes" haltonfailure="yes" printsummary="on" dir="${target}">
            <classpath refid="test.unit.run.path" />
            <formatter type="brief" usefile="false"/>
            <formatter type="xml"/>
            <test name="${testcase}" todir="${test.results}"/>
        </junit>
    </target>

    <target name="create-web-xml" depends="-set.log.dir, -set.status.file, -set.artifacts.dir">
                                  <!-- Add: ", -set.jmxport" to "depends" list to prompt for jmxport -->
        <filter token="YOUR CRUISECONTROL LOG DIRECTORY" value="${user.log.dir}" />
        <filter token="CURRENT BUILD STATUS FILE" value="${user.build.status.file}" />
        <filter token="ARTIFACTS DIRECTORY" value="${cruise.build.artifacts.dir}"/>
        <property name="cruise.build.jmxport" value="8000"/>
        <filter token="JMXPORT" value="${cruise.build.jmxport}"/>
        <copy filtering="true" todir="${temp.dir}" file="${webcontent}/WEB-INF/web.xml" />
    </target>

    <target name="-set.log.dir" unless="user.log.dir">
        <input message="WARNING! Property user.log.dir not set!  Please enter the absolute path to the CruiseControl logs directory:"
            addproperty="user.log.dir"/>
    </target>

    <target name="-set.status.file" unless="user.build.status.file">
        <input message="WARNING! Property user.build.status.file not set!  Please enter the name of the current build status file:"
            addproperty="user.build.status.file"/>
    </target>

    <target name="-set.artifacts.dir" unless="cruise.build.artifacts.dir">
        <input message="WARNING! Property cruise.build.artifacts.dir not set!  Please enter the absolute path to the directory where additional build artifacts are stored:"
            addproperty="cruise.build.artifacts.dir"/>
    </target>

    <target name="-set.jmxport" unless="cruise.build.jmxport">
        <input message="WARNING! Property cruise.build.jmxport not set!  Please enter the jmxport on which cruisecontrol is running:" addproperty="cruise.build.jmxport"/>
    </target>

    <target name="--war-init">
        <mkdir dir="target/war/libs" />
    </target>

    <target name="--war-copy-libs">
        <pathtofileset name="war.libs" pathrefid="war.libs.path" dir="${project.root}"/>
        <copy todir="target/war/libs" flatten="true">
            <fileset refid="war.libs" />
        </copy>
    </target>

    <target name="war" depends="compile, create-web-xml,--war-init,--war-copy-libs">
        <copy file="webwork.properties" todir="${classes}"/>
        <copy file="xwork.xml" todir="${classes}"/>
        <war warfile="${deploy.dir}/cruisecontrol.war" webxml="${temp.dir}/web.xml">
            <fileset dir="${webcontent}" excludes="WEB-INF/web.xml"/>
            <classes dir="${classes}"/>
            <lib dir="target/war/libs" />
            <lib refid="main.lib" />
            <manifest>
                <attribute name="Implementation-Version" value="${label}"/>
            </manifest>
        </war>
    </target>

    <target name="jsp-precompile" depends="war">
        <mkdir dir="target/jsp-precompile/exploded-war"/>
        <unzip src="${deploy.dir}/cruisecontrol.war" dest="target/jsp-precompile/exploded-war"/>

        <mkdir dir="target/jsp-precompile/src"/>
        <taskdef classname="org.apache.jasper.JspC" name="jasper2">
            <classpath id="jspc.classpath">
                <fileset refid="jetty-util.lib" />
                <fileset refid="jsp.lib" />
                <path refid="compile.path"/>
            </classpath>
        </taskdef>
        <jasper2 compile="true" outputdir="target/jsp-precompile/src"
                 listerrors="true" validatexml="true" verbose="2"
                 uriroot="${basedir}/target/jsp-precompile/exploded-war"/>
    </target>
</project>
