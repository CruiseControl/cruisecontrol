<!--
/********************************************************************************
 * CruiseControl, a Continuous Integration Toolkit
 * Copyright (c) 2007, ThoughtWorks, Inc.
 * 200 E. Randolph, 25th Floor
 * Chicago, IL 60601 USA
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *     + Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *     + Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 *
 *     + Neither the name of ThoughtWorks, Inc., CruiseControl, nor the
 *       names of its contributors may be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ********************************************************************************/
-->
<project name="cruise-dashboard" default="dist">
	<property name="project.root" location="${basedir}/../.." />
	<property name="ant.scripts" location="${project.root}/.ant-scripts" />

	<import file="${ant.scripts}/build-dependencies.xml"/>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <fileset refid="ant-contrib.lib"/>
        </classpath>
    </taskdef>

	<!-- define cc.version -->
	<property file="${project.root}/build.properties" />
    <!-- Use a local variable to make sure that a script that would read the
         properties file would still be capable of overidding this one.
         Note: the release.xml overrides this property -->
	<property name="cc.release.label" value="${cc.version}" />

	<property name="build.dir" value="target" />
	<property name="properties.dir" value="properties" />
	<property name="dist.dir" value="dist" />
	<property name="war.dir" value="${build.dir}/war" />
	<property name="app.classes.dir" value="${war.dir}/WEB-INF/classes" />
	<property name="test.classes.dir" value="${build.dir}/classes/test" />
	<property name="functionaltest.classes.dir" value="${build.dir}/classes/functionaltest" />
	<property name="src.dir" value="src" />
	<property name="war.src.dir" value="webapp" />
	<property name="resources.dir" value="resources" />
	<property name="test.dir" value="test" />
	<property name="unittest.dir" value="${test.dir}/unit" />
	<property name="functionaltest.dir" value="${test.dir}/functional" />
	<property name="reports.dir" value="${build.dir}/reports" />
	<property name="emma.dir" location="target/emma" />
	<property name="jsunit.dir" location="jsunit" />

	<property name="checkstyle.cache" value="${build.dir}/checkstyle.cache" />
	<property name="checkstyle.config" value="${project.root}/common/checkstyle.xml" />

	<import file="${project.root}/common/checkstyle-build.xml"/>

    <import file="build-paths.xml" />

	<property environment="env" />

	<import file="jsunit/jsunit.xml" />

    <taskdef resource="emma_ant.properties">
        <classpath>
            <fileset refid="emma.lib"/>
            <fileset refid="emma-ant.lib"/>
        </classpath>
    </taskdef>

    <typedef resource="org/tigris/subversion/svnant/svnantlib.xml">
        <classpath>
            <fileset refid="svn-ant.lib"/>
            <fileset refid="svn-client-adapter.lib"/>
            <fileset refid="svn-java-high-level.lib"/>
        </classpath>
    </typedef>

	<target name="-check-jdk">
		<condition property="not.jdk1.5">
			<or>
				<equals arg1="${ant.java.version}" arg2="1.2" />
				<equals arg1="${ant.java.version}" arg2="1.3" />
				<equals arg1="${ant.java.version}" arg2="1.4" />
			</or>
		</condition>
	</target>

	<target name="-check-browser-path">
		<available file="${env.BROWSER_PATH}" filepath="${env.BROWSER_PATH}" property="is.browser.found" />
	</target>

	<target name="-report-no-jsunit-tests" if="not.jdk1.5">
		<echo>You are using an older jdk version, so functional testing with jsunit will be skipped.</echo>
	</target>

	<target name="-report-failed-to-find-browser" unless="is.browser.found">
		<echo message="The browser you defined can not be found in destionation '${env.BROWSER_PATH}'.">
		</echo>
	</target>

	<target name="-compile">
		<ant antfile="build.xml" dir="${project.root}/main" target="jar" inheritall="false" />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${app.classes.dir}" />
		<javac destdir="${app.classes.dir}" classpathref="compile.path" debug="true" fork="true" source="1.5" target="1.5">
			<src location="${src.dir}" />
		</javac>
	</target>

	<target name="-compile-tests" unless="test.skip">
		<mkdir dir="${test.classes.dir}" />
		<mkdir dir="${functionaltest.classes.dir}" />
		<javac destdir="${test.classes.dir}" classpathref="test.unit.compile.path" debug="true" fork="true" failonerror="true" source="1.5" target="1.5">
			<src location="${unittest.dir}" />
		</javac>
		<javac destdir="${functionaltest.classes.dir}" classpathref="test.functional.compile.path" debug="true" fork="true" failonerror="true" source="1.5" target="1.5">
			<src location="${functionaltest.dir}" />
		</javac>
		<copy todir="${test.classes.dir}">
			<fileset dir="${unittest.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<target name="-unit-tests" unless="test.skip">
		<mkdir dir="${reports.dir}" />
		<mkdir dir="${test.classes.dir}/build" />
		<junit printsummary="yes" dir="${basedir}" haltonfailure="true" fork="true" forkMode="once">
			<classpath refid="test.unit.run.path" />

			<formatter type="brief" usefile="false" />
			<formatter type="xml" />

			<jvmarg value="-Demma.coverage.out.file=${emma.dir}/coverage.emma" />
			<jvmarg value="-Demma.coverage.out.merge=true" />

			<formatter type="xml" />
			<batchtest todir="${reports.dir}">
				<fileset dir="${unittest.dir}">
					<include name="**/*Test.java" />
					<exclude name="**/AllTests.java" />
					<exclude name="**/SpringBasedControllerTest.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<macrodef name="run.functional.tests">
		<attribute name="base.filter" />
		<attribute name="file.filter" />
		<sequential>
			<mkdir dir="${reports.dir}" />
			<junit printsummary="yes" fork="true" failureproperty="functional.test.failed" dir="${basedir}">
				<classpath refid="test.functional.run.path" />
				<formatter type="brief" usefile="false" />
				<formatter type="xml" />
				<batchtest todir="${reports.dir}">
					<fileset dir="${functionaltest.dir}">
						<include name="@{base.filter}/@{file.filter}.java" />
						<exclude name="**/BaseFunctionalTest.java" />
					</fileset>
				</batchtest>
			</junit>
		</sequential>
	</macrodef>

    <!-- the setting of the tmpdir would be required under Mac OS Snow Leopard (see CC-976)
    os.name=Mac OS X
    os.version=10.6.2
    -->
    <condition property="tmpdir.jvmarg" value="-Djava.io.tmpdir=/tmp" else="">
        <and>
            <os family="mac"/>
            <matches pattern="10\.6\.*" string="${os.version}"/>
        </and>
    </condition>

    <macrodef name="start.jetty.server">
        <sequential>
            <echo message="stopping any running jetty server"/>
            <waitfor maxwait="10" maxwaitunit="second" checkevery="500">
                <not>
                    <http url="http://localhost:9090/dashboard/jetty/stop" />
                </not>
            </waitfor>
            <echo message="starting jetty server"/>
            <parallel>
                <daemons>
                    <java classname="net.sourceforge.cruisecontrol.dashboard.testhelpers.WebTestingServer" fork="true">
                        <classpath refid="test.functional.run.path" />
                        <jvmarg line="${tmpdir.jvmarg}"/>
                    </java>
                </daemons>
                <waitfor maxwait="90" maxwaitunit="second" checkevery="500" timeoutproperty="jetty.server.start.timeout">
                    <http url="http://localhost:9090/dashboard/admin/config" />
                </waitfor>
            </parallel>
            <fail if="jetty.server.start.timeout" message="Unable to start jetty server." />
        </sequential>
    </macrodef>

	<macrodef name="stop.jetty.server">
		<sequential>
			<waitfor maxwait="10" maxwaitunit="second" checkevery="500">
				<not>
					<http url="http://localhost:9090/dashboard/jetty/stop" />
				</not>
			</waitfor>
		</sequential>
	</macrodef>

    <macrodef name="war.development">
        <sequential>
            <mkdir dir="${dist.dir}"/>
            <war destfile="${dist.dir}/dashboard.war" webxml="${war.dir}/WEB-INF/web.xml" duplicate="preserve">
                <fileset dir="${war.dir}">
                    <exclude name="javascripts"/>
                </fileset>
                <filename name="${war.dir}/javascripts/all.js"/>
                <classes dir="${test.classes.dir}"/>
                <lib dir="target/war/libs"/>
                <lib dir="lib">
                    <include name="licenses/*"/>
                </lib>
            </war>
        </sequential>
    </macrodef>

    <target name="-properties.production">
		<prepare.properties filter="src" />
	</target>

    <target name="filterTest" description="testing the filter">
        <filter token="buildNumber" value="${cc.release.label}"/>
        <copy todir="/tmp/filtered" filtering="true" overwrite="true">
            <fileset file="/tmp/testing"/>
        </copy>
    </target>

	<target name="-properties.unit" unless="test.skip">
		<prepare.properties filter="test" />
	</target>

	<target name="-properties.jwebunit" unless="test.skip">
		<prepare.properties filter="test" />
	</target>

	<target name="-properties.selenium" unless="test.skip">
		<prepare.properties filter="test" />
	</target>

	<target name="-properties.smoke" unless="test.skip">
		<prepare.properties filter="smoke" />
	</target>

	<macrodef name="prepare.properties">
		<attribute name="filter" />
		<sequential>
			<copy todir="${app.classes.dir}" overwrite="true">
				<fileset dir="${properties.dir}/@{filter}/" />
			</copy>
		</sequential>
	</macrodef>

	<!--Because ant does not allow same target running twice.-->
	<target name="-start.jwebunit.functional.testing.server" unless="test.skip">
		<start.jetty.server />
	</target>

	<target name="-start.smoke.testing.server" unless="test.skip">
		<start.jetty.server />
	</target>

	<target name="-start.selenium.functional.testing.server" unless="test.skip">
		<start.jetty.server />
	</target>

	<target name="-stop.jwebunit.functional.testing.server" unless="test.skip">
		<stop.jetty.server />
	</target>

	<target name="-stop.selenium.functional.testing.server" unless="test.skip">
		<stop.jetty.server />
	</target>

	<target name="-stop.smoke.testing.server" unless="test.skip">
		<stop.jetty.server />
	</target>

	<target name="-check.smoke.testing.result" if="functional.test.failed">
		<fail message="smoke tests failed" />
	</target>

	<target name="-check.selenium.testing.result" if="functional.test.failed">
		<fail message="selenium tests failed" />
	</target>

	<target name="-check.jwebunit.testing.result" if="functional.test.failed">
		<fail message="jwebunit tests failed" />
	</target>

	<target name="-prepare.functional.test.property" unless="functional.test">
		<property name="functional.test" value="*Test" />
	</target>

	<target name="-jwebunit-tests" unless="test.skip">
		<run.functional.tests base.filter="**/jwebunittests/**" file.filter="${functional.test}" />
	</target>

	<target name="-selenium.tests" unless="test.skip">
		<run.functional.tests base.filter="**/seleniumtests/**" file.filter="${functional.test}" />
	</target>

	<target name="-smoke.tests" unless="test.skip">
		<run.functional.tests base.filter="**/smoketests/**" file.filter="${functional.test}" />
	</target>

	<target name="-war.smoke" depends="--war-init,--war-copy-libs" unless="test.skip">
		<war.development />
	</target>

	<target name="-war.development" depends="--war-init,--war-copy-libs" unless="test.skip">
		<war.development />
	</target>

	<target name="-copy.resources.web">
		<mkdir dir="${war.dir}" />
		<copy todir="${war.dir}">
			<fileset dir="${war.src.dir}">
				<exclude name="**/classes/**" />
			</fileset>
		</copy>
	</target>

	<target name="-check.dotsvn.dir">
		<available file=".svn" property="has.dotsvn.dir">
		</available>
	</target>

	<target name="-generate.svn.revsion" if="has.dotsvn.dir" unless="current.revision">
		<svn>
			<status path="${basedir}" revisionProperty="current.revision" />
		</svn>
	</target>

	<target name="-write.version.info">
		<echo file="${war.dir}/WEB-INF/vm/admin/page_admin_version.txt" message="${cc.release.label}(${current.revision})" />
	</target>

    <target name="--war-init">
        <mkdir dir="target/war/libs" />
    </target>

    <target name="--war-copy-libs">
        <pathtofileset name="war.libs" pathrefid="war.libs.path" dir="${project.root}"/>
        <copy todir="target/war/libs" flatten="true">
            <fileset refid="war.libs" />
        </copy>
    </target>

    <target name="-war.production" depends="--war-init,--war-copy-libs">
        <mkdir dir="${dist.dir}"/>
        <manifest file="${war.dir}/MANIFEST.MF">
            <attribute name="CruiseControl-Version" value="${cc.release.label}(${current.revision})"/>
        </manifest>
        <war destfile="${dist.dir}/dashboard.war" webxml="${war.dir}/WEB-INF/web.xml" duplicate="preserve"
             manifest="${war.dir}/MANIFEST.MF">
            <fileset dir="${war.dir}">
                <exclude name="**/applicationContext-development.xml"/>
                <exclude name="javascripts/*.js"/>
            </fileset>
            <lib dir="target/war/libs"/>
            <lib dir="lib">
                <include name="licenses/*"/>
            </lib>
        </war>
    </target>

	<target name="-start.jetty.server.with.sys">
		<java classname="net.sourceforge.cruisecontrol.dashboard.testhelpers.CruiseDashboardServer" fork="true">
			<sysproperty key="cc.artifacts" value="${basedir}/test/data/arbitrary_artifacts/artifacts" />
			<sysproperty key="cc.config.file" value="${basedir}/test/data/config.xml" />
			<sysproperty key="cc.logdir" value="${basedir}/test/data/logs" />
			<sysproperty key="cc.config.forcebuild" value="enabled" />
			<sysproperty key="dashboard.config" value="${basedir}/test/data/dashboard-config.xml" />
			<classpath refid="test.functional.run.path" />
		</java>
	</target>

	<target name="-emma.instr">
		<mkdir dir="${emma.dir}" />
		<mkdir dir="${emma.dir}/classes" />
		<property name="junit.fail.on.error" value="false" />
		<emma enabled="true">
			<instr instrpath="${app.classes.dir}" destdir="${emma.dir}/classes" metadatafile="${emma.dir}/metadata.emma" merge="true">
				<filter excludes="net.sourceforge.cruisecontrol.dashboard.web.command.*" />
				<filter excludes="net.sourceforge.cruisecontrol.dashboard.exception.*" />
				<filter excludes="net.sourceforge.cruisecontrol.dashboard.testhelpers.*" />
				<filter excludes="net.sourceforge.cruisecontrol.dashboard.seleniumtests.*" />
				<filter excludes="net.sourceforge.cruisecontrol.dashboard.jwebunittests.*" />
			</instr>
		</emma>
	</target>

	<target name="-emma.reporting">
		<emma enabled="true">
			<report sort="+name" metrics="method:83,block:83,line:74,class:88">
				<fileset dir="${emma.dir}">
					<include name="*.emma" />
				</fileset>
				<xml outfile="${emma.dir}/coverage.xml" />
				<html outfile="${emma.dir}/coverage.html" />
			</report>
		</emma>
	</target>

	<target name="-emma.check">
		<loadfile property="emma.output" srcFile="${emma.dir}/coverage.html" />
		<fail message="Your code coverage is too low.">
			<condition>
				<contains string="${emma.output}" substring="class=&quot;h&quot;" casesensitive="false" />
			</condition>
		</fail>
	</target>

	<target name="-emma.clean">
		<delete dir="${emma.dir}" />
	</target>

	<target name="-copy.compress.jsunit">
		<copy todir="jsunit/compressed" overwrite="true">
			<fileset dir="${war.src.dir}/compressed">
				<include name="all.js" />
			</fileset>
		</copy>
	</target>

	<target name="-not.run.jsunit">
		<condition property="test.not.run.jsunit">
			<or>
				<istrue value="${test.skip}" />
				<istrue value="${not.jdk1.5}" />
			</or>
		</condition>
	</target>

	<target name="-jsunit" unless="test.not.run.jsunit">
		<echo message="${lib}" />
		<echo message="${basedir}" />
		<junit showoutput="true" haltonerror="true" haltonfailure="true">
			<formatter type="plain" usefile="false" />
			<classpath refid="classpath" />
			<sysproperty key="browserFileNames" value="${browserFileNames}" />
			<sysproperty key="description" value="${description}" />
			<sysproperty key="closeBrowsersAfterTestRuns" value="${closeBrowsersAfterTestRuns}" />
			<sysproperty key="logsDirectory" value="${logsDirectory}" />
			<sysproperty key="port" value="${port}" />
			<sysproperty key="resourceBase" value="${resourceBase}" />
			<sysproperty key="timeoutSeconds" value="${timeoutSeconds}" />
			<sysproperty key="url" value="${url}" />
			<test name="net.jsunit.StandaloneTest" />
		</junit>
	</target>

    <target name="-stop.selenium.server" unless="test.skip">
        <waitfor maxwait="10" maxwaitunit="second" checkevery="500">
            <not>
                <http url="http://localhost:4444/selenium-server/driver/?cmd=shutDown" />
            </not>
        </waitfor>
    </target>

	<target name="-start.selenium.server" unless="test.skip">
		<java jar="lib/buildtime/selenium-server.jar" fork="true" spawn="true">
			<arg line="-timeout 30" />
		</java>
		<waitfor maxwait="1" maxwaitunit="minute" checkevery="1" checkeveryunit="second">
			<socket server="localhost" port="4444" />
		</waitfor>
	</target>

	<target name="-concat.js">
		<concat destfile="${war.src.dir}/compressed/all.js">
			<fileset file="${war.src.dir}/javascripts/prototype.js" />
			<fileset file="${war.src.dir}/javascripts/build_base_observer.js" />
			<fileset file="${war.src.dir}/javascripts/effects.js" />
			<fileset file="${war.src.dir}/javascripts/json_to_css.js" />
			<fileset file="${war.src.dir}/javascripts/Tooltip.js" />
			<fileset file="${war.src.dir}/javascripts/Tooltip_ext.js" />
			<fileset dir="${war.src.dir}/javascripts" includes="*.js" excludes="prototype.js,scriptaculous.js,build_base_executer.js,effects.js,json_to_css.js,Tooltip.js,Tooltip_ext.js" />
		</concat>
	</target>

	<target name="--jsunit" depends="compress, -not.run.jsunit, -jsunit" />
	<target name="--run.unit.tests" depends="--compile, -compile-tests, -properties.unit, -unit-tests" />

	<target name="--compile" depends="clean, compress, -copy.resources.web, -compile" />
	<target name="--war.production" depends="-properties.production, -check.dotsvn.dir, -generate.svn.revsion, -write.version.info, -war.production" />
	<target name="--war.development" depends="-properties.jwebunit, -war.development" />
	<target name="--war.smoke" depends="-properties.smoke, -war.smoke" />

	<target name="--run.jwebunit.tests" depends="--prepare.functional.tests, -start.jwebunit.functional.testing.server, -prepare.functional.test.property, -jwebunit-tests, -stop.jwebunit.functional.testing.server, -check.jwebunit.testing.result" />

	<target name="--start-jetty-server" depends="--package.development, -start.jetty.server.with.sys" />
	<target name="--run.all.tests" depends="check-licenses, checkstyle, --run.unit.tests, smoke, --run.jwebunit.tests" />
	<target name="--package.production" depends="clean, --compile, --war.production" />
	<target name="--package.development" depends="clean, --compile, -compile-tests, --war.development" />
	<target name="--prepare.smoke.tests" depends="--compile, -compile-tests, --war.smoke" />
	<target name="--prepare.functional.tests" depends="--compile, -compile-tests, --war.development" />

	<target name="package.development" depends="--package.development" description="package for development" />
	<target name="package.production" depends="--package.production" description="package application for production" />
	<target name="ut" depends="--run.unit.tests" description="run all unit tests" />
	<target name="ft" depends="--run.jwebunit.tests" description="run all functional tests" />
	<target name="start.server" depends="--start-jetty-server" description="start jetty server" />
	<target name="all.test" depends="--run.all.tests" description="run unit tests and functional tests" />
	<target name="all.test.local" depends="--run.all.tests, js.unit, selenium, -war.production" description="run unit tests and functional tests" />

	<target name="clean" description="clean all">
		<delete dir="${emma.dir}/classes" quiet="true" />
		<delete dir="${build.dir}" quiet="true" />
		<delete dir="${app.classes.dir}" quiet="true" />
		<delete dir="${jsunit.dir}/ccjs" quiet="true" />
		<delete dir="${jsunit.dir}/logs" quiet="true" />
		<delete dir="${war.src.dir}/compressed" quiet="true" />
		<delete dir="dist" quiet="true" />
	</target>

	<target name="stat" depends="-emma.clean, --compile, -compile-tests,-properties.unit, -emma.instr, -unit-tests, -emma.reporting, -emma.check" description="generating the test coverage of source code" />

    <target name="checkstyle" description="checkstyle">
        <checkstyle-macro reportsdir="${reports.dir}" configfile="${checkstyle.config}" checkstylecache="${checkstyle.cache}" testdir="${unittest.dir}">
            <taskdef resource="checkstyletask.properties">
                <classpath>
                    <fileset refid="checkstyle.lib" />
                </classpath>
            </taskdef>
        </checkstyle-macro>
    </target>

	<target name="js.unit" depends="-check-jdk, -report-no-jsunit-tests, -check-browser-path, -report-failed-to-find-browser, --jsunit" description="run jsunit test" />
	<target name="selenium" depends="--prepare.functional.tests, -start.selenium.server, -start.selenium.functional.testing.server, -prepare.functional.test.property, -selenium.tests, -stop.selenium.server, -stop.selenium.functional.testing.server, -check.selenium.testing.result" description="run selenium test" />
	<target name="smoke" depends="--prepare.smoke.tests, -start.smoke.testing.server, -prepare.functional.test.property, -smoke.tests,-stop.smoke.testing.server, -check.smoke.testing.result" description="run selenium test" />
	<target name="dist" depends="-check.dotsvn.dir, -generate.svn.revsion, --run.all.tests, --war.production" description="build and package war" />
	<target name="product" depends="--compile, --war.production" description="build and package war without testing" />
	<target name="compress" depends="-concat.js, -copy.compress.jsunit" description="compresses all the js and css files to speed up browser load" />

    <target name="check-licenses" description="--> Checks if any required license files are missing">
        <foreach target="--check-exists" param="file">
            <path>
                <!-- aopalliance.jar is public domain -->
                <filelist dir="${project.root}/reporting/dashboard/lib/licenses">
                    <file name="LICENSE.dom-documentation.txt"/>
                    <file name="LICENSE.dom-software.txt"/>
                    <file name="LICENSE.sax.txt"/>
                    <file name="MIT-LICENSE.txt"/>
                    <file name="apache-license-2.0.txt"/>
                    <file name="mx4j-license.txt"/>
                    <file name="p4-license.txt"/>
                </filelist>
            </path>
        </foreach>
    </target>

    <target name="--check-exists">
        <available file="${file}" property="exists"/>
        <fail message="You are missing ${file}" unless="exists"/>
    </target>
</project>
