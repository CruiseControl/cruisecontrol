<?xml version="1.0"?>
<project>
    <description>
        Common test targets shared across all submodules.
    </description>

    <target name="--test-init">
        <available property="should.test.functional" file="${functionaltest}"/>
        <available property="should.test.unit" file="${test}"/>
    </target>

    <target name="--test-functional-init" if="should.test.functional">
        <mkdir dir="${test.classes}"/>
        <mkdir dir="target/test/functional/results"/>
        <mkdir dir="${functional-reports.dir}"/>
    </target>

    <target name="--test-functional-compile" if="should.test.functional">
        <javac srcdir="${functionaltest}" destdir="${test.classes}" classpathref="test.functional.compile.path" debug="on"
               includeAntRuntime="false"
               source="${javac.source}" target="${javac.target}"/>
    </target>

    <target name="--test-functional-copy-resources" if="should.test.functional">
        <copy todir="${test.classes}">
            <fileset dir="${functionaltest}" excludes="**/*.java" />
        </copy>
    </target>

    <target name="--test-functional" if="should.test.functional">
        <junit dir="${target}" fork="yes" forkmode="perBatch" haltonfailure="yes" maxmemory="${heapsize.max}"
               printsummary="true"
               includeAntRuntime="false"
                >
            <classpath refid="test.functional.run.path"/>

            <formatter type="brief" usefile="no"/>
            <formatter type="xml" usefile="yes"/>

            <batchtest fork="yes" todir="target/test/functional/results">
                <fileset dir="${test.classes}" includes="**/BuildLoopMonitorTest.class"/>
            </batchtest>
        </junit>
    </target>

    <target name="--test-functional-report" if="should.test.functional">
        <junitreport todir="${functional-reports.dir}">
            <fileset dir="target/test/functional/results">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${functional-reports.dir}"/>
        </junitreport>
    </target>

    <target name="--test-unit-init" if="should.test.unit">
        <mkdir dir="${test.classes}"/>
        <mkdir dir="${junit.results}"/>
        <mkdir dir="${reports.dir}"/>
    </target>

    <target name="--test-unit-compile" if="should.test.unit">
        <javac srcdir="${test}" destdir="${test.classes}" classpathref="test.unit.compile.path" debug="on"
               encoding="utf-8" includeAntRuntime="false"
               source="${javac.source}" target="${javac.target}"/>
    </target>

    <target name="--test-unit-copy-resources">
        <copy todir="${test.classes}">
            <fileset dir="${test}" includes="**/*.xml" />
            <fileset dir="${test}" includes="**/*.txt" />
        	<fileset dir="${test}" includes="**/*.html" />
        	<fileset dir="${test}" includes="**/*.css" />
            <fileset dir="${test}" includes="**/*.jar" />
            <fileset dir="${test}" includes="**/*.properties" />
        </copy>
    </target>

    <target name="--test-unit" if="should.test.unit">
        <junit dir="${target}" fork="yes" forkmode="perBatch" haltonfailure="yes" maxmemory="${heapsize.max}"
               printsummary="true"
               includeAntRuntime="false"
                >
            <classpath refid="test.unit.run.path"/>

            <jvmarg line="${remoteDebugJVMArgs}" />  <!-- use 'line' here because it handles an empty value. -->

            <jvmarg value="-Demma.coverage.out.file=${emma.stats}" />
            <jvmarg value="-Demma.coverage.out.merge=true" />

            <!-- Special environment variables used in test -->
            <env   key="TESTENV" value="test/env/variable" />

            <formatter type="brief" usefile="no"/>
            <formatter type="xml" usefile="yes"/>

            <batchtest fork="yes" todir="${junit.results}">
                <fileset dir="${test.classes}" includes="**/${tests}.class" excludes="**/ThreadQueueTest*"/>
            </batchtest>
        </junit>
    </target>

    <target name="--test-unit-report" if="should.test.unit">
        <junitreport todir="${reports.dir}">
            <fileset dir="${junit.results}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${reports.dir}"/>
        </junitreport>
    </target>
</project>
